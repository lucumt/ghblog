<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Security on 飞狐的部落格</title>
    <link>https://lucumt.info/categories/spring-security/</link>
    <description>Recent content in Spring Security on 飞狐的部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 20 Mar 2016 16:05:52 +0800</lastBuildDate>
    <atom:link href="https://lucumt.info/categories/spring-security/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>利用Spring Security动态的改变权限</title>
      <link>https://lucumt.info/posts/update-authority-dynamic-using-spring-security/</link>
      <pubDate>Sun, 20 Mar 2016 16:05:52 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/update-authority-dynamic-using-spring-security/</guid>
      <description>&lt;p&gt;利用 &lt;strong&gt;&lt;a href=&#34;http://projects.spring.io/spring-security/&#34;&gt;Spring Security&lt;/a&gt;&lt;/strong&gt; 来管理我们的web程序时，通常需要在&lt;strong&gt;&lt;em&gt;UserDetailsService&lt;/em&gt;&lt;/strong&gt; 接口中的 &lt;strong&gt;&lt;em&gt;loadUserByUsername&lt;/em&gt;&lt;/strong&gt; 方法中来初始化权限信息,但 &lt;strong&gt;&lt;em&gt;UserDetailsService&lt;/em&gt;&lt;/strong&gt; 一般用于登录验证，这也意味着用户的权限在登录过程中就会被计算出来。通常情况下由于用户的权限很少发生变化，在登录过程中计算出用户权限是合理的，但有些情况下，我们需要在中途来动态的改变用户的权限，此时我们可以利用 &lt;strong&gt;&lt;a href=&#34;http://projects.spring.io/spring-security/&#34;&gt;Spring Security&lt;/a&gt;&lt;/strong&gt; 提供的API来实现。&lt;/p&gt;

&lt;p&gt;以我自己的项目为例，&lt;strong&gt;&lt;em&gt;UserDetailsService&lt;/em&gt;&lt;/strong&gt; 接口中的 &lt;strong&gt;&lt;em&gt;loadUserByUsername&lt;/em&gt;&lt;/strong&gt; 具体实现如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override
public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
       
	UserModel userModel=userDao.getUserByUsername(username);
       
	if(userModel==null){
		throw new UsernameNotFoundException(username+&amp;quot; not exist!&amp;quot;);
	}
	
	List&amp;lt;GrantedAuthority&amp;gt; userAuthList=new ArrayList&amp;lt;GrantedAuthority&amp;gt;();
    
	//查询出用户相关的所有权限并放入List中
	List&amp;lt;AuthorityVO&amp;gt; authList=authorityDao.queryAuthorityByUserId(userModel.getId());
	for(AuthorityVO authVO:authList){
		userAuthList.add(new SimpleGrantedAuthority(authVO.getAuthName()));
	}

	//将查询出来的权限赋予用户
	UserDetails userDetails=new User(userModel.getUsername(),userModel.getPassword(),true,true,true,true,userAuthList);
	
	return userDetails;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述代码会一次性的把用户权限查询出来然后放入特定的 &lt;strong&gt;session&lt;/strong&gt; 中，但是 &lt;strong&gt;&lt;em&gt;UserDetailService&lt;/em&gt;&lt;/strong&gt; 方法一般只在用户登录web系统成功时才会被调用一次，使用范围较为局限，有时候我们需要在用户使用的过程中动态的改变用户的权限（譬如在我自己的项目中，当用户选中不同的项目之后，不同的项目对应不同的权限）。利用 &lt;strong&gt;&lt;a href=&#34;http://projects.spring.io/spring-security/&#34;&gt;Spring Security&lt;/a&gt;&lt;/strong&gt; 来管理权限信息时，用户的权限本质上是存储在一个 &lt;strong&gt;session&lt;/strong&gt; 中，只不过被&lt;strong&gt;&lt;a href=&#34;http://projects.spring.io/spring-security/&#34;&gt;Spring Security&lt;/a&gt;&lt;/strong&gt;进行了进一步的封装而已。所以若想动态的改变用户的权限，我们只需要将用户的信息重新存储到 &lt;strong&gt;session&lt;/strong&gt; 中即可，具体代码如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  List&amp;lt;GrantedAuthority&amp;gt; authList=new ArrayList&amp;lt;GrantedAuthority&amp;gt;();//用于存储修改之后的权限列表
  authList.add(new SimpleGrantedAuthority(&amp;quot;addUser&amp;quot;));
  authList.add(new SimpleGrantedAuthority(&amp;quot;editUser&amp;quot;));

  SecurityContext context=SecurityContextHolder.getContext();

  UserDetails userDetails=(UserDetails) context.getAuthentication().getPrincipal();
  Authentication auth=new UsernamePasswordAuthenticationToken(userDetails,userDetails.getPassword(),authList);

  context.setAuthentication(auth); //重新设置上下文中存储的用户权限
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>