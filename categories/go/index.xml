<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 飞狐的部落格</title>
    <link>http://lucumt.info/categories/go/</link>
    <description>Recent content in Go on 飞狐的部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 05 Mar 2017 14:04:43 +0800</lastBuildDate>
    <atom:link href="http://lucumt.info/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>在Intellij IDEA中引用Golang本地包</title>
      <link>http://lucumt.info/posts/import-local-package-in-intellij-idea/</link>
      <pubDate>Sun, 05 Mar 2017 14:04:43 +0800</pubDate>
      
      <guid>http://lucumt.info/posts/import-local-package-in-intellij-idea/</guid>
      <description>

&lt;p&gt;在学习&lt;code&gt;Golang&lt;/code&gt;时，自己最开始用的是eclpse中的&lt;a href=&#34;https://goclipse.github.io/&#34;&gt;goclipse&lt;/a&gt;插件来进行&lt;code&gt;Golang&lt;/code&gt;编程，但其对&lt;code&gt;Golang&lt;/code&gt;的支持不是太好，如代码格式化、自动导入引用包等都无法直接在eclipse中使用，并且其自动提示功能也没有像&lt;code&gt;Java&lt;/code&gt;那么强，于是转用&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;Intellij IDEA&lt;/a&gt;安装&lt;a href=&#34;https://plugins.jetbrains.com/plugin/5047-go&#34;&gt;Golang插件&lt;/a&gt;来替代使用，安装完插件后的&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;Intellij IDEA&lt;/a&gt;对&lt;code&gt;Golang&lt;/code&gt;的支持在各方面都很令人满意，唯独引入本地包的支持不太好用。经过一阵摸索自己找出了解决方案，先记录下。&lt;/p&gt;

&lt;h1 id=&#34;在eclipse中引用golang本地包:bb4f21717a930ee21245b90e8acfc2d5&#34;&gt;在Eclipse中引用Golang本地包&lt;/h1&gt;

&lt;p&gt;若我们采用的是&lt;a href=&#34;https://goclipse.github.io/&#34;&gt;goclipse&lt;/a&gt;来开发&lt;code&gt;Golang&lt;/code&gt;,则在其中引用本地包很简单，和引用Java包类似。如下图所示，假设 &lt;em&gt;src&lt;/em&gt; 是源代码所在的目录，在 &lt;em&gt;src&lt;/em&gt; 的 &lt;em&gt;sec&lt;/em&gt; 文件夹下有一个名为 &lt;em&gt;calculate.go&lt;/em&gt; 的文件，其中有一个名为 &lt;em&gt;Add&lt;/em&gt; 的函数用于计算两个整数的相加之和。&lt;br /&gt;
&lt;img src=&#34;http://lucumt.info/blog_img/import-local-page-in-intellij-idea/goclipse_package.png&#34; alt=&#34;goclipse中的本地包&#34; /&gt;
&lt;br /&gt;
若要在主程序main方法中调用 &lt;em&gt;Add&lt;/em&gt; 方法，先通过import引入该文件的包名&lt;code&gt;import service&lt;/code&gt;，然后通过包名调用该方法&lt;code&gt;service.Add(1,2)&lt;/code&gt;，如下图所示，可以看出在Eclipse中引用&lt;code&gt;Golang&lt;/code&gt;本地包与引用Java包没有太大的区别，都是将包文件放到 &lt;em&gt;src&lt;/em&gt; 源文件夹下，然后通过包名来引用。&lt;br /&gt;
&lt;img src=&#34;http://lucumt.info/blog_img/import-local-page-in-intellij-idea/goclipse_package_reference.png&#34; alt=&#34;goclipse中的本地包引用&#34; /&gt;
&lt;br /&gt;
也可以通过直接导入该包所在的文件夹的名称来调用该方法，此时需要将&lt;code&gt;import service&lt;/code&gt;改为&lt;code&gt;import sec&lt;/code&gt;，如下图所示&lt;br /&gt;
&lt;img src=&#34;http://lucumt.info/blog_img/import-local-page-in-intellij-idea/goclipse_package_reference_folder.png&#34; alt=&#34;goclipse中的本地包通过文件夹引用&#34; /&gt;
&lt;br /&gt;
可以看出在eclipse中导入&lt;code&gt;Golang&lt;/code&gt;本地包时有两种方法： &lt;strong&gt;通过import导入包名&lt;/strong&gt; 或 &lt;strong&gt;通过import导入该包对应的文件夹&lt;/strong&gt; ，这两种方法均可使程序正常运行。&lt;/p&gt;

&lt;h1 id=&#34;在intellij-idea中引用golang本地包:bb4f21717a930ee21245b90e8acfc2d5&#34;&gt;在Intellij IDEA中引用Golang本地包&lt;/h1&gt;

&lt;p&gt;下面2张图为在IDEA中建立的对应项目，图中 &lt;em&gt;gproject&lt;/em&gt; 是一个项目，&lt;em&gt;gotest&lt;/em&gt; 是一个模块，我们在 &lt;em&gt;gotest&lt;/em&gt; 下建立相关的测试文件。&lt;br /&gt;
&lt;img src=&#34;http://lucumt.info/blog_img/import-local-page-in-intellij-idea/idea_package.png&#34; alt=&#34;IDEA中的本地包&#34; /&gt;
&lt;br /&gt;
&lt;img src=&#34;http://lucumt.info/blog_img/import-local-page-in-intellij-idea/idea_package_reference.png&#34; alt=&#34;IDEA中的本地包引用&#34; /&gt;
&lt;br /&gt;
在上述代码中我们是通过&lt;code&gt;import service&lt;/code&gt;的方式来导入相应包的，由于IDEA对Golang很强，从图中可以看出 &lt;em&gt;service&lt;/em&gt; 的颜色与其它导入包的颜色不一致，当把鼠标移动到 &lt;em&gt;service&lt;/em&gt; 上时会提示 &lt;em&gt;Cannot resolve file &amp;lsquo;service&amp;rsquo;&lt;/em&gt; ，直接运行时，会出现如下图所示 &lt;em&gt;cannot find package&lt;/em&gt; 错误，将&lt;code&gt;import service&lt;/code&gt;修改为&lt;code&gt;import sec&lt;/code&gt;时，会出现同样的错误，可以看出在idea中默认不支持直接导入本地&lt;code&gt;Golang&lt;/code&gt;包。&lt;br /&gt;
&lt;img src=&#34;http://lucumt.info/blog_img/import-local-page-in-intellij-idea/idea_package_reference_run_error.png&#34; alt=&#34;IDEA中引用本地包运行出错&#34; /&gt;
&lt;br /&gt;
从报错信息可以看出，程序在运行时先去 &lt;strong&gt;GOROOT&lt;/strong&gt; 去搜索导入包，然后去 &lt;strong&gt;GOPATH&lt;/strong&gt; 寻找导入包，最后在当前项目模块下寻找导入包，但实际上不存在 &lt;em&gt;D:\program\IntelliJ IDEA 2016.2.1\workspace\gproject\gotest\src\service&lt;/em&gt; 这个目录，故而程序报错，不能正常运行。&lt;/p&gt;

&lt;p&gt;解决该问题的关键是明白 &lt;strong&gt;&lt;a href=&#34;http://golang.org/doc/install#tarball_non_standard&#34;&gt;GOROOT&lt;/a&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;a href=&#34;http://golang.org/cmd/go/#hdr-GOPATH_environment_variable&#34;&gt;GOPATH&lt;/a&gt;&lt;/strong&gt; 的作用，根据官方文档的解释 &lt;strong&gt;GOPATH&lt;/strong&gt; 的主要作用是存放文件以便&lt;code&gt;Golang&lt;/code&gt;程序编译时可以进行搜索引用，&lt;strong&gt;GOPATH&lt;/strong&gt; 可以设置一个值或多个值，多个值之间以分号隔开。很明显只要我们将本地&lt;code&gt;Golang&lt;/code&gt;加入到 &lt;strong&gt;GOPATH&lt;/strong&gt;中即可在IDEA中正常运行该程序。&lt;/p&gt;

&lt;p&gt;如下图所示，在IDEA中依次选择 &lt;strong&gt;File-&amp;gt;Settings-&amp;gt;Language&amp;amp;Frameworks-&amp;gt;Go-&amp;gt;Go Libraries&lt;/strong&gt; ，会出现如下图所示的配置&lt;code&gt;Golang&lt;/code&gt;库的界面，在该界面可以添加&lt;code&gt;Golang&lt;/code&gt;本地包所在的路径，该界面包含3个不同作用范围的配置方式： &lt;em&gt;Global libraries&lt;/em&gt; 、 &lt;em&gt;Project libraries&lt;/em&gt; 和 &lt;em&gt;Module libraries&lt;/em&gt; ，其中 &lt;em&gt;Global libraries&lt;/em&gt; 的配置对所有项目生效为全局配置，&lt;em&gt;Project libraries&lt;/em&gt; 的配置对整个项目生效，&lt;em&gt;Module libraries&lt;/em&gt; 的配置只对模块生效，可以看出在 &lt;em&gt;Global libraries&lt;/em&gt; 默认包含了 &lt;strong&gt;GOPATH&lt;/strong&gt; 。根据实际使用的需求我们可以选择把本地包设置在 &lt;em&gt;Project libraries&lt;/em&gt; 还是 &lt;em&gt;Module libraries&lt;/em&gt; 中。&lt;br /&gt;
&lt;img src=&#34;http://lucumt.info/blog_img/import-local-page-in-intellij-idea/idea_package_select_gopath.png&#34; alt=&#34;IDEA中配置程序库&#34; /&gt;
&lt;br /&gt;
本文的程序都是在 &lt;em&gt;gotest&lt;/em&gt; 模块下，故将其添加到 &lt;em&gt;Module libraries&lt;/em&gt; 下，添加完的结果如下所示：&lt;br /&gt;
&lt;img src=&#34;http://lucumt.info/blog_img/import-local-page-in-intellij-idea/idea_package_gopath_config.png&#34; alt=&#34;IDEA中配置程序库的结果&#34; /&gt;
&lt;br /&gt;
将本地包添加到模块库之后，还需要在go文件中将导入包的语句设置为&lt;code&gt;import sec&lt;/code&gt;，不能设置为&lt;code&gt;import service&lt;/code&gt;，然后该&lt;code&gt;Golang&lt;/code&gt;程序即可正常运行。&lt;/p&gt;

&lt;p&gt;可以看出，不同于&lt;a href=&#34;https://goclipse.github.io/&#34;&gt;goclipse&lt;/a&gt;，在IDEA中只能使用 &lt;strong&gt;通过import导入该包对应的文件夹&lt;/strong&gt; 来导入本地&lt;code&gt;Golang&lt;/code&gt;包，至于原因还需要进一步研究。&lt;/p&gt;

&lt;h1 id=&#34;利用goclipse时无法运行程序的解决方法:bb4f21717a930ee21245b90e8acfc2d5&#34;&gt;利用Goclipse时无法运行程序的解决方法&lt;/h1&gt;

&lt;p&gt;在使用&lt;a href=&#34;https://goclipse.github.io/&#34;&gt;goclipse&lt;/a&gt;运行&lt;code&gt;Golang&lt;/code&gt;程序时，偶尔会出现程序无法编译和运行的情况，这种情形一般都是 &lt;em&gt;src&lt;/em&gt; 没有被设置成源代码目录造成的，此时可以通过如下图所示的方法，将 &lt;em&gt;src&lt;/em&gt; 目录添加源代码目录。在Eclipse中选中该项目然后点击 &lt;strong&gt;Properties&lt;/strong&gt; ，会出现项目属性配置界面，点击 &lt;strong&gt;Go Project Configuration&lt;/strong&gt; ，通过 &lt;strong&gt;Add Folder&lt;/strong&gt; 可以将 &lt;em&gt;src&lt;/em&gt; 添加到源代码中，之后程序即可正常运行。&lt;br /&gt;
&lt;img src=&#34;http://lucumt.info/blog_img/import-local-page-in-intellij-idea/goclipse_add_source_folder.png&#34; alt=&#34;goclipse中添加源程序目录&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>利用Github Pages和基于Go的Hugo搭建个人博客</title>
      <link>http://lucumt.info/posts/create-website-with-hugo/</link>
      <pubDate>Sat, 27 Feb 2016 22:23:37 +0800</pubDate>
      
      <guid>http://lucumt.info/posts/create-website-with-hugo/</guid>
      <description>

&lt;p&gt;一直以来都想拥有一个属于自己的博客，前段时间在学习&lt;code&gt;Go&lt;/code&gt; ，于是利用&lt;code&gt;Hugo&lt;/code&gt; 和&lt;code&gt;Github Pages&lt;/code&gt; 搭建了一个简易的个人博客，先简单记录下。&lt;/p&gt;

&lt;h1 id=&#34;环境准备:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;环境准备&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;1.4+&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;v0.14+&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;账号&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.godaddy.com&#34;&gt;GoDaddy&lt;/a&gt;域名&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;过程概要:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;过程概要&lt;/h1&gt;

&lt;h2 id=&#34;在github上创建一个自己的项目:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;在Github上创建一个自己的项目&lt;/h2&gt;

&lt;p&gt;参考&lt;code&gt;Github Pages&lt;/code&gt; 官网首页的说明，按照提示步骤依次操作即可。在此过程中，有两个步骤需要我们进行选择：&lt;br /&gt;
1. 创建&lt;strong&gt;User or origanization site&lt;/strong&gt;或&lt;strong&gt;Project site&lt;/strong&gt;,我个人选择的是&lt;strong&gt;Project site&lt;/strong&gt;。
&lt;img src=&#34;https://ooo.0o0.ooo/2016/02/29/56d46b8727135.png&#34; alt=&#34;png_1&#34; /&gt;
&lt;br /&gt;
2. 若选择的是&lt;strong&gt;Project site&lt;/strong&gt;,则会让选择&lt;strong&gt;Generate a site&lt;/strong&gt;或&lt;strong&gt;Start from scratch&lt;/strong&gt;，个人选择&lt;strong&gt;Start from scratch&lt;/strong&gt;从头开始搭建。
&lt;img src=&#34;https://ooo.0o0.ooo/2016/02/27/56d1c72e8b3ba.png&#34; alt=&#34;png_2.png&#34; /&gt;
&lt;br /&gt;
当然个人的爱好不同，不一定非得选择&lt;strong&gt;Project site&lt;/strong&gt;和&lt;strong&gt;Start from scratch&lt;/strong&gt;，这不是本文的重点，只要能按照&lt;code&gt;Github Pages&lt;/code&gt;的提示成功搭建自己的静态博客即可。&lt;/p&gt;

&lt;h2 id=&#34;利用hugo作为博客生成器:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;利用Hugo作为博客生成器&lt;/h2&gt;

&lt;p&gt;由于&lt;code&gt;Github Pages&lt;/code&gt; 只支持静态的html页面托管，所以需要采用&lt;code&gt;Jekyll&lt;/code&gt; 、&lt;code&gt;Logdown&lt;/code&gt; 等静态博客生成器来快速生成HTML页面，避免纯手动编写时的费时费力。由于自己近期一直在学习&lt;code&gt;Go&lt;/code&gt;，为了加深自己对于&lt;code&gt;Go&lt;/code&gt;的运用，于是便选择&lt;code&gt;Hugo&lt;/code&gt; 作为自己的博客生成器。&lt;code&gt;Hugo&lt;/code&gt; 是一个基于&lt;code&gt;Go]&lt;/code&gt;开发的静态生成器，它采用&lt;em&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-cn/Markdown&#34;&gt;Markdown&lt;/a&gt;&lt;/em&gt; 语法来编写博客生成，然后生成相应的HTML页面。&lt;/p&gt;

&lt;h3 id=&#34;安装go:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;安装Go&lt;/h3&gt;

&lt;p&gt;访问&lt;a href=&#34;https://golang.org/dl/&#34;&gt;Golang下载页&lt;/a&gt;根据自己电脑的操作系统选择是Linux版本或Windows版本，同时注意是选择32位还是64位，一定要与自己的操作系统相匹配。以我自己的64位win7系统为例，安装过程如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;下载&lt;strong&gt;go1.4.2.windows-amd64.msi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;双击安装，默认是安装在C盘下，由于windows操作系统的特性，我通常不倾向于安装在C盘，故需要设置&lt;code&gt;PATH&lt;/code&gt;、&lt;code&gt;GOPATH&lt;/code&gt;和&lt;code&gt;GOROOT&lt;/code&gt;这三个环境变量，我自己把&lt;code&gt;Go&lt;/code&gt;安装在 &lt;em&gt;D:\code\go&lt;/em&gt; 下，这三个变量相应的设置为:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;PATH=&amp;rsquo;D:\code\go\bin&amp;rsquo;;%PATH%&lt;br /&gt;
GOPATH=&amp;rsquo;D:\code\gopath&amp;rsquo;&lt;br /&gt;
GOROOT=&amp;rsquo;D:\code\go&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其中&lt;strong&gt;PATH&lt;/strong&gt;变量的作用主要是为了将&lt;code&gt;Go&lt;/code&gt;的各种命令加到cmd中。&lt;strong&gt;GOROOT&lt;/strong&gt;则是当我们将&lt;code&gt;Go&lt;/code&gt;安装在我们的自定义目录时，需要制定该安装目录，若安装在默认目录&lt;strong&gt;C:\go&lt;/strong&gt;下则不用设置&lt;strong&gt;GOROOT&lt;/strong&gt;目录，官方文档原文为&lt;em&gt;GOROOT must be set only when installing to a custom location.&lt;/em&gt; 比较难懂的是&lt;strong&gt;GOPATH&lt;/strong&gt;,官方文档上的说明为 &lt;em&gt;Create a directory to contain your workspace, $HOME/work for example, and set the GOPATH environment variable to point to that location.&lt;/em&gt; 据此我们可以将&lt;strong&gt;GOPATH&lt;/strong&gt;理解为工作目录，它主要用来存放&lt;code&gt;Go&lt;/code&gt;代码编译之后的可执行文件，其位置可以随意设置，只要不与&lt;strong&gt;GOROOT&lt;/strong&gt;相同即可。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安装完成之后，重新打开cmd窗口，输入&lt;strong&gt;go version&lt;/strong&gt;之后按Enter键，若出现如下信息，则表示&lt;code&gt;Go&lt;/code&gt;安装成功:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;C:\Users\Administrator&amp;gt;go version&lt;br /&gt;
go version go1.4.2 windows/amd64&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;安装hugo:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;安装Hugo&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Hugo&lt;/code&gt;的安装过程与&lt;code&gt;Go&lt;/code&gt;的类似.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;首先在&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo下载页&lt;/a&gt;根据自己操作系统的类型和位数下载相应的安装包，然后设置对应的&lt;strong&gt;PATH&lt;/strong&gt;环境变量即可。我的安装在 &lt;em&gt;D:\program\hugo&lt;/em&gt; 所以相应的环境变量设置为&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;PATH=&amp;rsquo;D:\program\hugo&amp;rsquo;;%PATH%&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;重新打开cmd窗口，输入&lt;strong&gt;hugo version&lt;/strong&gt;，若出现如下信息，则表示&lt;code&gt;Hugo&lt;/code&gt;安装成功：&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;C:\Users\Administrator&amp;gt;hugo version
Hugo Static Site Generator v0.14 BuildDate: 2015-05-26T01:29:16+08:00&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;关于&lt;code&gt;Hugo&lt;/code&gt;的基本操作命令，可以参见&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Hugo快速入门&lt;/a&gt;，此处不再详述。&lt;/p&gt;

&lt;h2 id=&#34;在github-pages上托管hugo:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;在Github Pages上托管Hugo&lt;/h2&gt;

&lt;h3 id=&#34;安装命令:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;安装命令&lt;/h3&gt;

&lt;p&gt;最权威的信息还是来源于官方文档，可以参见&lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;在Github Pages上托管Hugo&lt;/a&gt;,主要的&lt;code&gt;Git&lt;/code&gt;操作命令如下：&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# Create a new orphand branch (no commit history) named gh-pages&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;checkout&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;orphan&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gh&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pages&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Unstage all files&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rm&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cached&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ls&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;files)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Grab one file from the master branch so we can make a commit&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;checkout&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;master&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;README&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;md&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Add and commit that file&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;commit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;INIT: initial commit on gh-pages branch&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Push to remote gh-pages branch&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;origin&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gh&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pages&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Return to master branch&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;checkout&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;master&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Remove the public folder to make room for the gh-pages subtree&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;rm&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rf&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Add the gh-pages branch of the repository. It will look like a folder named public&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subtree&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;prefix&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;git@github&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:spencerlyon2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hugo_gh_blog&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gh&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pages&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;squash&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Pull down the file we just committed. This helps avoid merge conflicts&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subtree&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pull&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;prefix&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;git@github&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:spencerlyon2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hugo_gh_blog&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gh&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pages&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Run hugo. Generated site will be placed in public directory (or omit -t ThemeName if you&amp;#39;re not using a theme)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;hugo&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ThemeName&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# 如果不是第一次创建，那么后续更新时可以从此步骤开始&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# Add everything&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Commit and push to master&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;commit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Updating site&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Push to master&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;origin&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;master&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# 将主干中public目录同步到gh-pages分支上&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subtree&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;prefix&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;git@github&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:spencerlyon2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hugo_gh_blog&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gh&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;说明信息:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;说明信息&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;上述命令的核心思想把源代码放在&lt;strong&gt;master&lt;/strong&gt;上，把生成的静态html代码通过&lt;strong&gt;substree&lt;/strong&gt;命令放到&lt;strong&gt;branch&lt;/strong&gt;上；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Git&lt;/code&gt;主干的名字可以随便取，但是分支的名字必须为&lt;code&gt;gh-pages&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;上述命令针对的是从头到尾开始创建一个&lt;code&gt;Git&lt;/code&gt;项目然后提交，如果之前已经有&lt;code&gt;gh-pages&lt;/code&gt;项目了，则可以从 &lt;em&gt;git subtree add &amp;ndash;prefix=public git@github.com:spencerlyon2/hugo_gh_blog.git gh-pages &amp;ndash;squash&lt;/em&gt; 这句代码开始执行；&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;相关命令:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;相关命令&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;生成绑定到指定域名的页面
&lt;code&gt;hugo server -D --baseUrl=&amp;quot;http://lucumt.info&amp;quot; --appendPort=false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;&amp;ndash;待续&amp;ndash;&amp;gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>