<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 飞狐的部落格</title>
    <link>https://lucumt.info/post/</link>
    <description>Recent content in Posts on 飞狐的部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 20 Aug 2022 20:35:44 +0800</lastBuildDate><atom:link href="https://lucumt.info/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>将MinIO中的文件夹下载为ZIP文件</title>
      <link>https://lucumt.info/post/minio/download-minio-folder-as-zip-file/</link>
      <pubDate>Sat, 20 Aug 2022 20:35:44 +0800</pubDate>
      
      <guid>https://lucumt.info/post/minio/download-minio-folder-as-zip-file/</guid>
      <description>&lt;p&gt;公司项目采用&lt;a href=&#34;https://min.io/&#34;&gt;&lt;strong&gt;MinIO&lt;/strong&gt;&lt;/a&gt;作为数据存储，最近遇到一个需求是将其中的某个文件夹的数据基于其原有的结构下载为&lt;code&gt;ZIP&lt;/code&gt;文件，网上有很多下载为&lt;code&gt;ZIP&lt;/code&gt;的代码，个人觉得其中好多不够精简，简单记录下自己的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Kubernetes中配置service-node-port-range不生效的问题</title>
      <link>https://lucumt.info/post/k8s/service-node-port-range-config-not-working-in-k8s/</link>
      <pubDate>Mon, 15 Aug 2022 18:27:59 +0800</pubDate>
      
      <guid>https://lucumt.info/post/k8s/service-node-port-range-config-not-working-in-k8s/</guid>
      <description>&lt;p&gt;近期在公司内部搭建基于&lt;a href=&#34;https://kubesphere.com.cn/&#34;&gt;&lt;strong&gt;KubeSphere&lt;/strong&gt;&lt;/a&gt;的持续集成平台时，发现其底层的&lt;a href=&#34;https://kubernetes.io/&#34;&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/a&gt;默认的端口范围为&lt;strong&gt;30000-32767&lt;/strong&gt;而公司有多个采用微服务模块的项目在使用，默认的端口范围不便于分配使用，在基于网上文档修改的过程中自己踩到了一个坑，简单记录下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KubeSphere使用心得</title>
      <link>https://lucumt.info/post/devops/share-experiences-for-using-kubesphere/</link>
      <pubDate>Sat, 06 Aug 2022 18:00:08 +0800</pubDate>
      
      <guid>https://lucumt.info/post/devops/share-experiences-for-using-kubesphere/</guid>
      <description>&lt;p&gt;目前公司的开发方式都是手工编译&amp;amp;部署，十分低效，最近将Web开发相关的项目都基于&lt;a href=&#34;https://kubesphere.io/&#34;&gt;KubeSphere&lt;/a&gt;通过基于&lt;a href=&#34;https://www.jenkins.io/&#34;&gt;Jenkins&lt;/a&gt;的流水线方式实现了自动部署，在此过程中遇到了一些阻塞点，简单记录下它们的解决方案。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>由于daemon.json中的配置与其它启动项冲突导致docker服务无法启动</title>
      <link>https://lucumt.info/post/docker/can-not-set-log-driver-and-log-opts-in-docker-daemon-json/</link>
      <pubDate>Thu, 04 Aug 2022 16:56:18 +0800</pubDate>
      
      <guid>https://lucumt.info/post/docker/can-not-set-log-driver-and-log-opts-in-docker-daemon-json/</guid>
      <description>&lt;p&gt;由于公司的&lt;code&gt;docker&lt;/code&gt;容器在运行一段时间后日志变得很大，通过&lt;code&gt;shell&lt;/code&gt;脚本或者结合&lt;code&gt;docker stop&lt;/code&gt;、&lt;code&gt;docker rm&lt;/code&gt;和&lt;code&gt;docker run&lt;/code&gt;来重新创建实例方式都觉得太麻烦，按照网络上的建议在&lt;code&gt;/etc/docker/daemon.json&lt;/code&gt;中进行相关修改后却一直无法启动，同时错误信息一直提示&lt;code&gt;unable to configure the Docker daemon with file /etc/docker/daemon.json: the following directives are specified both as a flag and in the config…e: json-file)&lt;/code&gt;，经过一番排查后终于找到原因，故记录下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Hugo生成的博客中动态的修改样式</title>
      <link>https://lucumt.info/post/hugo/change-hugo-style-in-even-theme/</link>
      <pubDate>Mon, 01 Aug 2022 17:04:09 +0800</pubDate>
      
      <guid>https://lucumt.info/post/hugo/change-hugo-style-in-even-theme/</guid>
      <description>&lt;p&gt;自己一直特别羡慕&lt;a href=&#34;https://www.cnblogs.com&#34;&gt;&lt;strong&gt;博客园&lt;/strong&gt;&lt;/a&gt;上某些博主的博文样式（如&lt;a href=&#34;https://www.cnblogs.com/wupeixuan/p/13450815.html&#34;&gt;武培轩&lt;/a&gt;,&lt;a href=&#34;https://www.cnblogs.com/javaguide/p/16385150.html&#34;&gt;JavaGuide&lt;/a&gt;)，这些博文样式第一眼看起来就很清爽,让人很有阅读的欲望，而我总感觉自己博客的样式特丑陋。即使不关注内容，只看排版布局和样式，有时候自己写完一篇文章自己都不想去看，何况别人！&lt;/p&gt;
&lt;p&gt;终于有一天我受不了自己的博客样式，决定对其升级一版，在这个过程中发现个人采用的博客主题&lt;a href=&#34;https://github.com/olOwOlo/hugo-theme-even&#34;&gt;&lt;strong&gt;Even&lt;/strong&gt;&lt;/a&gt;功能很强大，基于上没做啥修改就达到了自己想要的效果，特此记录下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>5.[译]同线程系统</title>
      <link>https://lucumt.info/post/translate/java-concurrency/same-threading/</link>
      <pubDate>Thu, 16 Jun 2022 12:16:44 +0800</pubDate>
      
      <guid>https://lucumt.info/post/translate/java-concurrency/same-threading/</guid>
      <description>&lt;p&gt;本文翻译自&lt;a href=&#34;https://jenkov.com/tutorials/java-concurrency/same-threading.html&#34;&gt;&lt;strong&gt;Same-threading&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;同线程系统(Same-threading)&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 是由一个单线程横向扩展为N个线程系统并行执行的并发模型。&lt;/p&gt;
&lt;p&gt;同线程系统不是纯粹的单线程系统，因为它包含多个线程。 但其中每个线程都像单线程系统一样运，因此采用术语同线程而不是单线程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Chrome中将上传的文件夹数据转化为按树结构展示</title>
      <link>https://lucumt.info/post/web/convert-folder-upload-data-to-tree-node-in-chrome/</link>
      <pubDate>Sun, 20 Feb 2022 20:38:18 +0800</pubDate>
      
      <guid>https://lucumt.info/post/web/convert-folder-upload-data-to-tree-node-in-chrome/</guid>
      <description>&lt;p&gt;项目中有个模块支持按文件夹选中批量上传，用户希望在真正上传之前能够在浏览器中实时预览选中的文件夹层级结构，本文基于&lt;code&gt;Chrome&lt;/code&gt;浏览器为例，简要说明这一实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring中BeanFactory和FactoryBean的区别以及使用场景</title>
      <link>https://lucumt.info/post/spring/spring-core/difference-between-factorybean-and-beanfactory/</link>
      <pubDate>Sun, 16 Jan 2022 11:00:01 +0800</pubDate>
      
      <guid>https://lucumt.info/post/spring/spring-core/difference-between-factorybean-and-beanfactory/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html&#34;&gt;&lt;strong&gt;BeanFactory&lt;/strong&gt;&lt;/a&gt;和&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/FactoryBean.html&#34;&gt;&lt;strong&gt;FactoryBean&lt;/strong&gt;&lt;/a&gt;的区别与使用场景是&lt;a href=&#34;https://spring.io/&#34;&gt;&lt;strong&gt;Spring&lt;/strong&gt;&lt;/a&gt;面试中的高频题之一，本文基于网上资料和个人理解，简要说明他们之间的异同以及使用场景。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MyBatis中插入JSON格式数据</title>
      <link>https://lucumt.info/post/mybatis/insert-json-data-in-mybatis/</link>
      <pubDate>Thu, 15 Apr 2021 09:37:41 +0800</pubDate>
      
      <guid>https://lucumt.info/post/mybatis/insert-json-data-in-mybatis/</guid>
      <description>&lt;p&gt;简单记录下如何在&lt;a href=&#34;https://mybatis.org/mybatis-3/&#34;&gt;&lt;strong&gt;MyBatis&lt;/strong&gt;&lt;/a&gt;中插入&lt;a href=&#34;https://www.json.org/json-en.html&#34;&gt;&lt;strong&gt;JSON&lt;/strong&gt;&lt;/a&gt;，以备参考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在MyBatis接口中使用Optional进行非空判断</title>
      <link>https://lucumt.info/post/mybatis/using-optional-in-mybatis-mapper/</link>
      <pubDate>Thu, 13 Feb 2020 14:40:19 +0800</pubDate>
      
      <guid>https://lucumt.info/post/mybatis/using-optional-in-mybatis-mapper/</guid>
      <description>&lt;p&gt;在进行&lt;code&gt;Java&lt;/code&gt;开发时，&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html&#34;&gt;&lt;strong&gt;NullPointerException&lt;/strong&gt;&lt;/a&gt;是一个很常见的异常，在&lt;code&gt;Java8&lt;/code&gt;中提供了&lt;a href=&#34;https://www.oracle.com/technical-resources/articles/java/java8-optional.html&#34;&gt;&lt;strong&gt;Optional&lt;/strong&gt;&lt;/a&gt;来避免此问题，而在&lt;a href=&#34;https://blog.mybatis.org/2019/01/mybatis-350-released.html&#34;&gt;&lt;strong&gt;MyBatis 3.5.0&lt;/strong&gt;&lt;/a&gt;中也提供了对&lt;code&gt;Optional&lt;/code&gt;的支持，本文简要叙述如何在&lt;code&gt;MyBatis&lt;/code&gt;中使用&lt;code&gt;Optional&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL中由于user表中错误的host配置导入无法登录数据库</title>
      <link>https://lucumt.info/post/mysql/mysql-can-not-login-due-to-incorrect-host-config/</link>
      <pubDate>Thu, 22 Aug 2019 11:32:19 +0800</pubDate>
      
      <guid>https://lucumt.info/post/mysql/mysql-can-not-login-due-to-incorrect-host-config/</guid>
      <description>&lt;p&gt;在给&lt;code&gt;MySQL&lt;/code&gt;数据库进行配置时，对于&lt;code&gt;mysql&lt;/code&gt;数据库表下的&lt;code&gt;user&lt;/code&gt;表配置错误，导致无法通过命令登录进入&lt;code&gt;MySQL&lt;/code&gt;数据库，查找网上的文档发现可通过&lt;strong&gt;安全模式&lt;/strong&gt;进入，简单记录下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL中快速创建大量测试数据</title>
      <link>https://lucumt.info/post/mysql/mysql-create-massive-test-data-quickly/</link>
      <pubDate>Fri, 08 Feb 2019 13:57:45 +0800</pubDate>
      
      <guid>https://lucumt.info/post/mysql/mysql-create-massive-test-data-quickly/</guid>
      <description>&lt;p&gt;在学习&lt;code&gt;MySQL&lt;/code&gt;索引和分库分表等知识的过程中，经常会涉及到创建大批量的测试数据，本文简要说明自己常用的几种创建方式以及各自的优劣对比。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL中不同SELECT COUNT统计总数时的区别</title>
      <link>https://lucumt.info/post/mysql/difference-and-usage-for-various-select-count/</link>
      <pubDate>Fri, 25 Jan 2019 17:18:27 +0800</pubDate>
      
      <guid>https://lucumt.info/post/mysql/difference-and-usage-for-various-select-count/</guid>
      <description>&lt;p&gt;在数据库中使用&lt;code&gt;COUNT&lt;/code&gt;函数统计总数是常用操作，本文参考网上资料以及个人实际操作记录下&lt;code&gt;MySQL&lt;/code&gt;中通过&lt;code&gt;COUNT(列名)&lt;/code&gt;、&lt;code&gt;COUNT(常量)&lt;/code&gt;以及&lt;code&gt;COUNT(*)&lt;/code&gt;在&lt;strong&gt;相同查询条件下&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt; 的区别以及使用场景。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ClassNotFoundException与NoClassDefFoundError对比</title>
      <link>https://lucumt.info/post/java-core/difference-between-class-not-found-exception-and-no-class-def-found-error/</link>
      <pubDate>Wed, 02 Jan 2019 14:18:46 +0800</pubDate>
      
      <guid>https://lucumt.info/post/java-core/difference-between-class-not-found-exception-and-no-class-def-found-error/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ClassNotFoundException.html&#34;&gt;&lt;strong&gt;ClassNotFoundException&lt;/strong&gt;&lt;/a&gt;与&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/NoClassDefFoundError.html&#34;&gt;&lt;strong&gt;NoClassDefFoundError&lt;/strong&gt;&lt;/a&gt;是&lt;code&gt;Java&lt;/code&gt;开发中经常会遇到的异常与错误，本文基于个人工作中遇到的场景以及网上的资料，简要总结它们的差异、出现场景以及规避方案。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译]如何处理InterruptedException</title>
      <link>https://lucumt.info/post/translate/java-concurrency/dealing-with-interrupted-exception/</link>
      <pubDate>Sat, 15 Dec 2018 11:57:36 +0800</pubDate>
      
      <guid>https://lucumt.info/post/translate/java-concurrency/dealing-with-interrupted-exception/</guid>
      <description>&lt;p&gt;本文翻译自 &lt;strong&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/library/j-jtp05236/&#34;&gt;Dealing with InterruptedException&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个故事可能很熟悉: 你正在编写一个测试程序，需要将程序暂停一段时间,于是你调用了&lt;code&gt;Thread.sleep()&lt;/code&gt;来实现。
但此时编译器或IDE会立即提示你没有处理非运行时异常 &lt;strong&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/?java/lang/InterruptedException.html&#34;&gt;InterruptedException&lt;/a&gt;&lt;/strong&gt;。那么，什么是&lt;code&gt;InterruptedException&lt;/code&gt;,为什么我们要必须处理它呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>volatile关键字在Java程序中的使用</title>
      <link>https://lucumt.info/post/java-concurrency/how-to-use-volatile-in-java/</link>
      <pubDate>Sat, 08 Dec 2018 23:49:33 +0800</pubDate>
      
      <guid>https://lucumt.info/post/java-concurrency/how-to-use-volatile-in-java/</guid>
      <description>&lt;p&gt;&lt;code&gt;volatile&lt;/code&gt;关键字在Java多线程编程中很常见，由于自己之前学习多线程时一度以为只要需确保线程可见性的代码都需要使用&lt;code&gt;volatile&lt;/code&gt;关键字，后来发现并不是这样的，故简单记录下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java中利用==和equals()进行字符串比较的说明</title>
      <link>https://lucumt.info/post/java-core/java-string-equal-compare/</link>
      <pubDate>Sat, 08 Dec 2018 23:02:10 +0800</pubDate>
      
      <guid>https://lucumt.info/post/java-core/java-string-equal-compare/</guid>
      <description>&lt;p&gt;Java中字符串的比较在面试中很常见，我们都知道比较字符串是否相等要使用&lt;code&gt;equals()&lt;/code&gt;而不是&lt;code&gt;==&lt;/code&gt;。本文首先利用&lt;code&gt;javap&lt;/code&gt;命令从class文件的角度来分析不同字符串比较的结果，然后分析下&lt;code&gt;Tomcat&lt;/code&gt;中如何获取前端输入的字符串参数,并以此说明Java Web开发中该如何正确的进行字符串的比较。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java中interrupt()、interrupted()、isInterrupted()的区别</title>
      <link>https://lucumt.info/post/java-concurrency/difference-between-interrupt-interrupted-isinterrupted/</link>
      <pubDate>Mon, 03 Dec 2018 22:57:56 +0800</pubDate>
      
      <guid>https://lucumt.info/post/java-concurrency/difference-between-interrupt-interrupted-isinterrupted/</guid>
      <description>&lt;p&gt;最近复习Java多线程相关知识时，发现线程中断的&lt;code&gt;interrupt()&lt;/code&gt;、&lt;code&gt;interrupted()&lt;/code&gt;、&lt;code&gt;isInterrupted()&lt;/code&gt;这3个方法容易让人产生混淆，结合官网的API以及实际代码验证，先简单记录下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用126邮箱在阿里云中发送SSL/TSL加密邮件</title>
      <link>https://lucumt.info/post/java-core/send-ssl-mail-with-126-in-aliyun/</link>
      <pubDate>Mon, 03 Dec 2018 21:54:05 +0800</pubDate>
      
      <guid>https://lucumt.info/post/java-core/send-ssl-mail-with-126-in-aliyun/</guid>
      <description>&lt;p&gt;由于工作原因需要在阿里云中部署一个Web系统，该系统会调用邮箱服务器定时给相关人员发送通知邮件,在测试邮箱配置时，发现始终无法正确发送邮件，而之前在研发环境和测试环境都能正常工作。网上查找之后，发现是阿里云出于安全原因默认禁止了25端口的出方向访问，需要进行&lt;a href=&#34;https://help.aliyun.com/knowledge_detail/56130.html?spm=5176.10695662.1996646101.searchclickresult.51d3cd65xV8EFf&#34; title=&#34;25端口解封申请&#34;&gt;&lt;strong&gt;25端口解封申请&lt;/strong&gt;&lt;/a&gt;，按照说明提交相应的申请后没想到不到一个小时就提醒申请未通过，同时提示使用465端口来发送加密邮件。基于此，本文简要说明如何使用126邮箱通过465端口在阿里云中发送邮件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Quartz中动态设置定时任务的执行时间</title>
      <link>https://lucumt.info/post/quartz/update-quartz-scheduler-dynamic/</link>
      <pubDate>Tue, 09 Jan 2018 22:10:30 +0800</pubDate>
      
      <guid>https://lucumt.info/post/quartz/update-quartz-scheduler-dynamic/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.quartz-scheduler.org/&#34;&gt;&lt;strong&gt;Quartz&lt;/strong&gt;&lt;/a&gt;是软件开发中常用的任务调度框架，实际中通常结合 &lt;a href=&#34;https://spring.io/&#34;&gt;&lt;strong&gt;Spring&lt;/strong&gt;&lt;/a&gt; 一起使用，并在Spring的配置文件中利用&lt;code&gt;0 0 12 ? \* WED&lt;/code&gt;这种方式以硬编码的方式配置定时任务的执行时间。有时候需要动态的设置定时任务的执行时间，如让用户自己选择何时备份数据，此时就需要采用动态设置其执行时间。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用dom4j修改含有回车换行符的XML文件</title>
      <link>https://lucumt.info/post/java-core/update-xml-file-has-line-breaks-using-dom4j/</link>
      <pubDate>Thu, 04 Jan 2018 11:21:42 +0800</pubDate>
      
      <guid>https://lucumt.info/post/java-core/update-xml-file-has-line-breaks-using-dom4j/</guid>
      <description>&lt;p&gt;这几天工作中遇到一个利用&lt;a href=&#34;https://dom4j.github.io/&#34;&gt;&lt;strong&gt;dom4j&lt;/strong&gt;&lt;/a&gt;更新XML文件的任务，由于XML文件中部分属性包含有换行符，利用&lt;code&gt;dom4j(1.6.1)&lt;/code&gt;默认的方法更新XML文件后换行符会丢失。 各种Google、StackOverflow折腾好久后终于解决该问题，简单记录下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>将基于Github Pages的自定义域名博客迁移到HTTPS</title>
      <link>https://lucumt.info/post/hugo/migrate-github-blog-from-http-to-https/</link>
      <pubDate>Sun, 24 Dec 2017 10:28:03 +0800</pubDate>
      
      <guid>https://lucumt.info/post/hugo/migrate-github-blog-from-http-to-https/</guid>
      <description>&lt;p&gt;越来越多的网站和个人博客都变成 &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTPS&#34; title=&#34;https://en.wikipedia.org/wiki/HTTPS&#34;&gt;&lt;strong&gt;HTTPS&lt;/strong&gt;&lt;/a&gt; ，而自己的博客一直都是用的是 &lt;a href=&#34;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&#34; title=&#34;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&#34;&gt;&lt;strong&gt;HTTP&lt;/strong&gt;&lt;/a&gt; 协议，作为一个具有强迫症的人，每次用 &lt;a href=&#34;https://www.google.cn/chrome/browser/desktop/index.html&#34; title=&#34;https://www.google.cn/chrome/browser/desktop/index.html&#34;&gt;&lt;strong&gt;Chrome&lt;/strong&gt;&lt;/a&gt; 浏览器打开个人博客时看见浏览器地址栏显示的&lt;img src=&#34;https://lucumt.info/blog_img/hugo/migrate-github-blog-from-http-to-https/http_icon.png&#34; alt=&#34;&amp;amp;ldquo;Chrome HTTP标识&amp;amp;rdquo;&#34; title=&#34;Chrome HTTP标识&#34;&gt; 都感觉很不舒服。趁着前段时间不太忙，将个人博客从&lt;code&gt;HTTP&lt;/code&gt;迁移到了&lt;code&gt;HTTPS&lt;/code&gt; ，先记录下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从复杂代码中找出Bug的几种方法</title>
      <link>https://lucumt.info/post/other/different-ways-find-bug-in-complex-code/</link>
      <pubDate>Sat, 23 Dec 2017 12:07:40 +0800</pubDate>
      
      <guid>https://lucumt.info/post/other/different-ways-find-bug-in-complex-code/</guid>
      <description>&lt;p&gt;工作中有时候会遇到某些大段复杂代码出现Bug的情况，不同于一般行数较小或逻辑较简单的代码，对于大段复杂的代码进行分析可能会很耗时，本文介绍几种个人在工作中用到的方法，供大家参考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在不同版本的MyBatis中通过Log4j打印实际执行的SQL</title>
      <link>https://lucumt.info/post/mybatis/print-sql-in-different-mybatis-version/</link>
      <pubDate>Mon, 18 Dec 2017 18:33:14 +0800</pubDate>
      
      <guid>https://lucumt.info/post/mybatis/print-sql-in-different-mybatis-version/</guid>
      <description>&lt;p&gt;项目中ORM框架用的是 &lt;a href=&#34;http://www.mybatis.org/mybatis-3/&#34;&gt;&lt;strong&gt;MyBatis&lt;/strong&gt;&lt;/a&gt;，最近由于业务上的需求将&lt;code&gt;MyBatis&lt;/code&gt;从&lt;strong&gt;3.1.1&lt;/strong&gt;升级到&lt;strong&gt;3.4.5&lt;/strong&gt;，发现升级后通过&lt;a href=&#34;https://logging.apache.org/log4j/1.2/download.html&#34;&gt;&lt;strong&gt;Log4j&lt;/strong&gt;&lt;/a&gt;显示SQL的配置方式发生了变化，由于变化较大，故先记录下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在不重新编译的情况下直接修改Java Class文件中的内容</title>
      <link>https://lucumt.info/post/java-core/modify-java-class-file-content-directly/</link>
      <pubDate>Sat, 12 Aug 2017 18:09:53 +0800</pubDate>
      
      <guid>https://lucumt.info/post/java-core/modify-java-class-file-content-directly/</guid>
      <description>&lt;p&gt;Java程序实际上执行的是Java文件编译后的Class文件，这是任何一个Java开发人员都了解的基本知识。若Java程序执行的结果不符合要求，通常的解决方法是先修改Java文件，重新编译成Class文件后再次执行。但有时候我们不能直接修改Java文件（如只有包含class文件的jar包），此时我们就只能直接修改Class文件，本文将展示在基于不同的需求通过可视化工具和&lt;code&gt;Javassist&lt;/code&gt;库来直接对Class文件进行修改的方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解决EasyUI DataGrid中的行在列冻结时无法对齐的问题</title>
      <link>https://lucumt.info/post/web/easyui-datagrid-row-not-align-when-column-frozen/</link>
      <pubDate>Sun, 06 Aug 2017 00:06:36 +0800</pubDate>
      
      <guid>https://lucumt.info/post/web/easyui-datagrid-row-not-align-when-column-frozen/</guid>
      <description>&lt;p&gt;相对于传统的用HTML中TABLE实现的表格，利用&lt;a href=&#34;https://www.jeasyui.com&#34;&gt;&lt;strong&gt;EasyUI&lt;/strong&gt;&lt;/a&gt;中的&lt;a href=&#34;https://www.jeasyui.com/demo/main/index.php?plugin=DataGrid&#34;&gt;&lt;strong&gt;DataGrid&lt;/strong&gt;&lt;/a&gt;实现的表格具有很多优点，如可以对列宽进行拖动调整、列冻结、行冻结、自定义格式化等功能，故而在Web开发中得到了广泛的应用。最近自己在使用DataGrid的列冻结功能时遇到了由于某些单元格中的内容较多导致该行无法对齐的问题，由于当前在EasyUI官网中无法找到该问题的解决方案，自己研究DataGrid的实现原理后，找到了变通的解决方案，故先记录下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>4. [译]并发的模型</title>
      <link>https://lucumt.info/post/translate/java-concurrency/concurrency-models/</link>
      <pubDate>Sat, 05 Aug 2017 00:10:11 +0800</pubDate>
      
      <guid>https://lucumt.info/post/translate/java-concurrency/concurrency-models/</guid>
      <description>&lt;p&gt;本文翻译自&lt;a href=&#34;http://tutorials.jenkov.com/java-concurrency/concurrency-models.html&#34;&gt;&lt;strong&gt;Java Concurrency / Concurrency Models&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;并发系统可以使用不同的并发模型来实现，并发模型是指线程在系统中如何写作来完成给定的任务。不同的并发模型以不同的方式拆分任务，线程间以不同的方式协作和通信，本文将深入研究在撰写本文时最流行并发模型(2015年)。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在MyEclipse项目中不能打开birt报表的解决方法</title>
      <link>https://lucumt.info/post/web/cannot-open-birt-report-in-myeclipse-project/</link>
      <pubDate>Fri, 07 Apr 2017 10:47:28 +0800</pubDate>
      
      <guid>https://lucumt.info/post/web/cannot-open-birt-report-in-myeclipse-project/</guid>
      <description>由于业务要求，需要在利用MyEclipse中开发的Web项目中添加Birt报表统计功能，新建完一个report.rptdesign文件后双击</description>
    </item>
    
    <item>
      <title>3. [译]多线程的成本</title>
      <link>https://lucumt.info/post/translate/java-concurrency/multithreading-costs/</link>
      <pubDate>Sat, 01 Apr 2017 21:57:30 +0800</pubDate>
      
      <guid>https://lucumt.info/post/translate/java-concurrency/multithreading-costs/</guid>
      <description>&lt;p&gt;本文翻译自&lt;a href=&#34;http://tutorials.jenkov.com/java-concurrency/costs.html&#34;&gt;&lt;strong&gt;Java Concurrency / Multithreading Costs&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从一个单线程程序切换为多线程程序在给我们带来好处的同时也会产生一些额外的成本，不要因为会使用多线程就将一个程序变为多线程实现。在准备使用多线程时，我们应该有一个清楚的认识：使用多线程带来的好处大于其成本，当有不确定时，我们应该尝试度量应用程序的性能和响应性来决定是否采用多线程，而不是靠猜来决定。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2. [译]多线程的优点</title>
      <link>https://lucumt.info/post/translate/java-concurrency/multithreading-benefits/</link>
      <pubDate>Sat, 01 Apr 2017 13:18:43 +0800</pubDate>
      
      <guid>https://lucumt.info/post/translate/java-concurrency/multithreading-benefits/</guid>
      <description>&lt;p&gt;本文翻译自&lt;a href=&#34;http://tutorials.jenkov.com/java-concurrency/benefits.html&#34;&gt;&lt;strong&gt;Java Concurrency / Multithreading Benefits&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;尽管多线程给程序实现带来了挑战，但由于多线程的一些优点我们仍然在使用它，其中的一些优点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更好的资源利用&lt;/li&gt;
&lt;li&gt;在某些场景可以简化程序设计&lt;/li&gt;
&lt;li&gt;提高程序响应&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>1. [译]Java多线程与并发教程</title>
      <link>https://lucumt.info/post/translate/java-concurrency/java-concurrency-multithreading-tutorial/</link>
      <pubDate>Thu, 30 Mar 2017 14:49:08 +0800</pubDate>
      
      <guid>https://lucumt.info/post/translate/java-concurrency/java-concurrency-multithreading-tutorial/</guid>
      <description>&lt;p&gt;本文翻译自&lt;a href=&#34;http://tutorials.jenkov.com/java-concurrency/index.html&#34;&gt;&lt;strong&gt;Java Concurrency / Multithreading Tutorial&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最开始一台电脑只有单个CPU，只能一次运行一个任务，之后出现的多任务处理则意味着计算机在同一时间可以处理多个程序（也可以称之为任务或进程），虽然它们并不是真正的并发。由于单个CPU被不同的程序共用，操作系统需要在程序运行过程中不停地切换CPU，在短暂的执行一个程序后就立即切换到下一个程序。&lt;/p&gt;
&lt;p&gt;多任务处理给软件开发人员提出了新的挑战，程序不能再假定拥有CPU所有的可用时间、内存和其它计算机资源，一个好的程序应该及时释放所有不需要使用的资源，以便其它程序可以使用它们。
之后出现的多线程则意味着可以在同一个程序里面执行多个线程，每一个执行的线程可以被认为是CPU在执行当前程序，当在同一个程序里面执行多个线程时，看起来像是拥有多个CPU在执行该程序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Intellij IDEA中引用Golang本地包</title>
      <link>https://lucumt.info/post/golang/import-local-package-in-intellij-idea/</link>
      <pubDate>Sun, 05 Mar 2017 14:04:43 +0800</pubDate>
      
      <guid>https://lucumt.info/post/golang/import-local-package-in-intellij-idea/</guid>
      <description>&lt;p&gt;在学习&lt;code&gt;Golang&lt;/code&gt;时，自己最开始用的是&lt;code&gt;Eclipse&lt;/code&gt;中的&lt;a href=&#34;https://goclipse.github.io/&#34;&gt;&lt;strong&gt;goclipse&lt;/strong&gt;&lt;/a&gt;插件来进行&lt;code&gt;Golang&lt;/code&gt;编程，但其对&lt;code&gt;Golang&lt;/code&gt;的支持不是太好，如代码格式化、自动导入引用包等都无法直接在&lt;code&gt;Eclipse&lt;/code&gt;中使用，并且其自动提示功能也没有像&lt;code&gt;Java&lt;/code&gt;那么强，于是转用&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;&lt;strong&gt;Intellij IDEA&lt;/strong&gt;&lt;/a&gt;安装&lt;a href=&#34;https://plugins.jetbrains.com/plugin/5047-go&#34;&gt;&lt;strong&gt;Golang插件&lt;/strong&gt;&lt;/a&gt;来替代使用，安装完插件后的&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;&lt;strong&gt;Intellij IDEA&lt;/strong&gt;&lt;/a&gt;对&lt;code&gt;Golang&lt;/code&gt;的支持在各方面都很令人满意，唯独引入本地包的支持不太好用。经过一阵摸索自己找出了解决方案，先记录下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算两个平行于坐标轴的矩形相交的面积</title>
      <link>https://lucumt.info/post/algorithm/calculate-total-area-of-two-rectangles/</link>
      <pubDate>Sun, 26 Feb 2017 19:26:33 +0800</pubDate>
      
      <guid>https://lucumt.info/post/algorithm/calculate-total-area-of-two-rectangles/</guid>
      <description>&lt;p&gt;之前面试时遇到一个算法题:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假定两个矩形各条边都是平行于坐标轴，已知k、l、m、n分别为其中一个矩形左下角和右上角x轴、y轴坐标，p、q、r、s分别为另一个矩形的左下角和右上角x轴、y轴坐标，求这两个矩形的总面积，当矩形相交时要减去相交的面积。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此题利用常规的枚举法很复杂，但利用排除法和归纳法却能很快解决，故先记录下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在iframe嵌套的html5中播放视频时全屏显示和取消音量调整</title>
      <link>https://lucumt.info/post/web/show-video-in-html5-page/</link>
      <pubDate>Sun, 30 Oct 2016 19:48:17 +0800</pubDate>
      
      <guid>https://lucumt.info/post/web/show-video-in-html5-page/</guid>
      <description>&lt;p&gt;由于项目需要，最近使用了在&lt;code&gt;html5&lt;/code&gt;中播放视频的功能，期间遇到了几个坑，先简单记录下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>不通过第三方变量来交换两个变量的值</title>
      <link>https://lucumt.info/post/algorithm/swap-two-variables-without-temp-variable/</link>
      <pubDate>Fri, 12 Aug 2016 11:03:09 +0800</pubDate>
      
      <guid>https://lucumt.info/post/algorithm/swap-two-variables-without-temp-variable/</guid>
      <description>&lt;p&gt;变量交换是编程中经常使用的功能，本文记录几种不通过不添加第三方变量来交换两个变量的实现方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mybatis batch insert exception的解决方法</title>
      <link>https://lucumt.info/post/mybatis/mybatis-batch-insert-exception/</link>
      <pubDate>Mon, 30 May 2016 18:20:37 +0800</pubDate>
      
      <guid>https://lucumt.info/post/mybatis/mybatis-batch-insert-exception/</guid>
      <description>&lt;p&gt;在利用 &lt;a href=&#34;http://www.mybatis.org/mybatis-3/&#34;&gt;&lt;strong&gt;MyBatis&lt;/strong&gt;&lt;/a&gt;进行多条数据插入时，为了提高性能我们可能会使用批量插入的功能来实现。示例代码如下:&lt;/p&gt;
&lt;p&gt;SQL配置文件:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;insert&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;addAuthorityRoleBatch&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;parameterType=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;List&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    INSERT INTO system_authority_role(role_id,authority_id)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      VALUES
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;foreach&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;collection=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;item=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;authRole&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;separator=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        (#{authRole.roleId},#{authRole.authorityId})
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;/foreach&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/insert&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>利用SpringMVC下载大文件时内存溢出的处理</title>
      <link>https://lucumt.info/post/spring/spring-mvc/download-big-file-using-springmvc/</link>
      <pubDate>Sun, 20 Mar 2016 16:41:29 +0800</pubDate>
      
      <guid>https://lucumt.info/post/spring/spring-mvc/download-big-file-using-springmvc/</guid>
      <description>&lt;p&gt;文件的上传和下载是Web系统中的一个很普通的功能，实现的方式也有很多种，如利用 &lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/io/package-summary.html&#34;&gt;&lt;strong&gt;java.io&lt;/strong&gt;&lt;/a&gt;下面的各种IO类自己实现，或者利用 &lt;a href=&#34;https://commons.apache.org/proper/commons-io/&#34;&gt;&lt;strong&gt;Commons IO&lt;/strong&gt;&lt;/a&gt;包中的&lt;code&gt;FileUtils&lt;/code&gt;、 &lt;code&gt;IOUtils&lt;/code&gt; 类中封装好的方法直接调用。由于目前我所开发的系统采用了 &lt;a href=&#34;http://docs.spring.io/autorepo/docs/spring/3.2.x/spring-framework-reference/html/mvc.html&#34;&gt;&lt;strong&gt;SpringMVC&lt;/strong&gt;&lt;/a&gt;来作为项目的MVC实现，所以很自然的采用 &lt;a href=&#34;http://docs.spring.io/autorepo/docs/spring/3.2.x/spring-framework-reference/html/mvc.html&#34;&gt;&lt;strong&gt;SpringMVC&lt;/strong&gt;&lt;/a&gt;内置的API进行文件的下载，但在实际使用过程中发现其对大文件的下载支持不太好，现把解决方案记录如下：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用Spring和JUnit对数据库操作进行单元测试</title>
      <link>https://lucumt.info/post/spring/spring-core/using-junit-in-spring/</link>
      <pubDate>Sun, 20 Mar 2016 16:27:21 +0800</pubDate>
      
      <guid>https://lucumt.info/post/spring/spring-core/using-junit-in-spring/</guid>
      <description>&lt;p&gt;在进行Java程序开发时，我们偶尔会被要求使用&lt;a href=&#34;http://junit.org/&#34;&gt;&lt;strong&gt;JUnit&lt;/strong&gt;&lt;/a&gt;进行单元测试来确保我们所写的程序逻辑是正确的。一个良好的单元测试应该具备 &lt;code&gt;覆盖度高&lt;/code&gt;，&lt;code&gt;可重复执行&lt;/code&gt;,&lt;code&gt;单一性&lt;/code&gt;等特点。本文主要关注&lt;code&gt;可重复执行&lt;/code&gt;，在Web开发中，大部分方法都会使数据库的记录发生变化，为了能够重复执行，必须利用&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1&#34;&gt;&lt;strong&gt;数据库事务&lt;/strong&gt;&lt;/a&gt;来进行&lt;code&gt;回滚&lt;/code&gt;从而达到重复执行的目的。最原始的方法是利用 &lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/sql/Connection.html&#34;&gt;&lt;strong&gt;java.sql.Connection&lt;/strong&gt;&lt;/a&gt;类的 &lt;code&gt;commit()&lt;/code&gt; 或 &lt;code&gt;rollback()&lt;/code&gt; 方法来在每个单元测试方法中手动的进行提交或回滚，此种方式使得单元测试代码嵌入了与实际业务逻辑无关的数据库操作事务控制代码。利用&lt;a href=&#34;https://spring.io/&#34;&gt;&lt;strong&gt;Spring&lt;/strong&gt;&lt;/a&gt;和&lt;a href=&#34;http://junit.org/&#34;&gt;&lt;strong&gt;JUnit&lt;/strong&gt;&lt;/a&gt;通过注解的方式我们可以很容易的对单元测试中的数据库操作进行事务控制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用Spring Security动态改变登录用户的权限</title>
      <link>https://lucumt.info/post/spring/update-authority-dynamic-using-spring-security/</link>
      <pubDate>Sun, 20 Mar 2016 16:05:52 +0800</pubDate>
      
      <guid>https://lucumt.info/post/spring/update-authority-dynamic-using-spring-security/</guid>
      <description>&lt;p&gt;利用&lt;a href=&#34;http://projects.spring.io/spring-security/&#34;&gt;&lt;strong&gt;Spring Security&lt;/strong&gt;&lt;/a&gt;来管理我们的web程序时，通常需要在&lt;code&gt;UserDetailsService&lt;/code&gt;接口中的&lt;code&gt;loadUserByUsername&lt;/code&gt;方法中来初始化权限信息,但&lt;code&gt;UserDetailsService&lt;/code&gt;一般用于登录验证，这也意味着用户的权限在登录过程中就会被计算出来。通常情况下由于用户的权限很少发生变化，在登录过程中计算出用户权限是合理的，但有些情况下，我们需要在中途来动态的改变用户的权限，此时我们可以利用&lt;a href=&#34;http://projects.spring.io/spring-security/&#34;&gt;&lt;strong&gt;Spring Security&lt;/strong&gt;&lt;/a&gt;提供的API来实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Spring中利用Mock对HttpServletRequest进行单元测试</title>
      <link>https://lucumt.info/post/spring/spring-mvc/using-mock-test-http-servlet-request/</link>
      <pubDate>Sat, 19 Mar 2016 22:43:47 +0800</pubDate>
      
      <guid>https://lucumt.info/post/spring/spring-mvc/using-mock-test-http-servlet-request/</guid>
      <description>&lt;h2 id=&#34;编写单元测试时的注意事项&#34;&gt;编写单元测试时的注意事项&lt;/h2&gt;
&lt;p&gt;根据软件开发过程中的&lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;&lt;strong&gt;TDD&lt;/strong&gt;&lt;/a&gt;理论，在我们编写自己的代码时，要尽量使得该代码能够进行单元测试。为了能够使得代码可以进行单元测试，我们在给接口或方法传入参数时要尽量传入简单参数，避免传入&lt;code&gt;HttpServletRequest&lt;/code&gt; , &lt;code&gt;ServletContext&lt;/code&gt;等和web上下文相关的复杂对象。但仍有部分情况下基于代码简洁性和可维护性的考虑，我们需要传入&lt;code&gt;HttpServletRequest&lt;/code&gt;对象，此时对此类方法进行&lt;a href=&#34;http://junit.org/&#34;&gt;&lt;strong&gt;JUnit&lt;/strong&gt;&lt;/a&gt;单元测试时会较为困难，本文介绍一种在&lt;a href=&#34;https://spring.io/&#34;&gt;&lt;strong&gt;Spring&lt;/strong&gt;&lt;/a&gt;中通过&lt;a href=&#34;http://mockito.org/&#34;&gt;&lt;strong&gt;Mock&lt;/strong&gt;&lt;/a&gt;来模拟&lt;code&gt;HttpServletRequest&lt;/code&gt;对象进行&lt;a href=&#34;http://junit.org/&#34;&gt;&lt;strong&gt;JUnit&lt;/strong&gt;&lt;/a&gt;单元测试的方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mediawiki添加回到顶部的方法</title>
      <link>https://lucumt.info/post/web/mediawiki-back-to-top/</link>
      <pubDate>Fri, 18 Mar 2016 23:14:59 +0800</pubDate>
      
      <guid>https://lucumt.info/post/web/mediawiki-back-to-top/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.mediawiki.org/wiki/MediaWiki&#34;&gt;&lt;strong&gt;Mediawiki&lt;/strong&gt;&lt;/a&gt;是&lt;a href=&#34;https://www.wikipedia.org/&#34;&gt;&lt;strong&gt;维基百科&lt;/strong&gt;&lt;/a&gt;系统所采用的框架，适合于需要快速搭建知识分享的场合。采用&lt;a href=&#34;https://www.mediawiki.org/wiki/MediaWiki&#34;&gt;&lt;strong&gt;Mediawiki&lt;/strong&gt;&lt;/a&gt;生成的知识共享平台和&lt;a href=&#34;https://www.wikipedia.org/&#34;&gt;&lt;strong&gt;维基百科&lt;/strong&gt;&lt;/a&gt;的操作与使用类似，都支持采用&lt;a href=&#34;https://zh.wikipedia.org/zh-cn/Markdown&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;语法来编辑。在有些时候，某些词条的内容很长，使得浏览器出现了滚动条，如果能仿照微博等网站添加一个&lt;strong&gt;回到顶部&lt;/strong&gt;的功能，将会给我们的使用带来很大的便利，本文介绍一种实现方法：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译] Java Volatile 关键字详解</title>
      <link>https://lucumt.info/post/java-concurrency/java-volatile-keyword/</link>
      <pubDate>Mon, 07 Mar 2016 18:03:18 +0800</pubDate>
      
      <guid>https://lucumt.info/post/java-concurrency/java-volatile-keyword/</guid>
      <description>&lt;p&gt;本文翻译自 &lt;a href=&#34;http://tutorials.jenkov.com/java-concurrency/volatile.html&#34;&gt;&lt;strong&gt;Java Volatile Keyword&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Java关键字&lt;code&gt;volatile&lt;/code&gt;用于将一个Java变量标记为&lt;strong&gt;在主内中存储&lt;/strong&gt;，更准确的解释为：每次读取一个&lt;code&gt;volatile&lt;/code&gt;变量时将从电脑的主内存中读取而不是从CPU缓存中读取，每次对一个&lt;code&gt;volatile&lt;/code&gt;变量进行写操作时，将会写入到主内存中而不是写入到CPU缓存中。&lt;/p&gt;
&lt;p&gt;事实上，从&lt;code&gt;Java5&lt;/code&gt;之后，&lt;code&gt;volatile&lt;/code&gt;关键字不仅仅可以用来确保&lt;code&gt;volatile&lt;/code&gt;变量是写入到主内存和从主内存读取数据，我会在下面的章节进行详细的介绍：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cannot run program &#34;mysqldump&#34;: CreateProcess error=2, The system cannot find the file specified</title>
      <link>https://lucumt.info/post/mysql/can-not-run-program-mysqldump/</link>
      <pubDate>Thu, 03 Mar 2016 14:33:43 +0800</pubDate>
      
      <guid>https://lucumt.info/post/mysql/can-not-run-program-mysqldump/</guid>
      <description>&lt;p&gt;项目中用到了&lt;code&gt;MySQL&lt;/code&gt;数据库的备份功能，通过调用&lt;code&gt;Java&lt;/code&gt;程序中的&lt;a href=&#34;http://docs.oracle.com/javase/6/docs/api/&#34;&gt;&lt;strong&gt;Runtime&lt;/strong&gt;&lt;/a&gt;来执行&lt;code&gt;mysqldump&lt;/code&gt;命令自动的生成相关的&lt;code&gt;MySQL&lt;/code&gt;数据库文件以供恢复之用。相关的代码如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Runtime&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;runtime&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Runtime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getRuntime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mysqlCmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;mysqldump&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; -u&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;username&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; -p&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;s&#34;&gt;&amp;#34;  -h &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;databaseAddress&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;databaseName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Process&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;process&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysqlCmd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;但是在客户那里实际使用时，有时候会出现在cmd中&lt;code&gt;MySQL&lt;/code&gt;命令可以正常识别但是程序不能正常执行的情况，报错信息如下:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用Github Pages和基于Go的Hugo搭建个人博客</title>
      <link>https://lucumt.info/post/hugo/create-website-with-hugo/</link>
      <pubDate>Sat, 27 Feb 2016 22:23:37 +0800</pubDate>
      
      <guid>https://lucumt.info/post/hugo/create-website-with-hugo/</guid>
      <description>&lt;p&gt;一直以来都想拥有一个属于自己的博客，前段时间在学习&lt;code&gt;Go&lt;/code&gt; ，于是利用&lt;code&gt;Hugo&lt;/code&gt; 和&lt;code&gt;Github Pages&lt;/code&gt; 搭建了一个简易的个人博客，先简单记录下。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
