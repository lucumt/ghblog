<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 飞狐的部落格</title>
    <link>https://lucumt.info/post/</link>
    <description>Recent content in Posts on 飞狐的部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 09 Jan 2018 22:10:30 +0800</lastBuildDate>
    
	<atom:link href="https://lucumt.info/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在Quartz中动态设置定时任务的执行时间</title>
      <link>https://lucumt.info/post/update-quartz-scheduler-dynamic/</link>
      <pubDate>Tue, 09 Jan 2018 22:10:30 +0800</pubDate>
      
      <guid>https://lucumt.info/post/update-quartz-scheduler-dynamic/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.quartz-scheduler.org/&#34;&gt;Quartz&lt;/a&gt;&lt;/strong&gt;是软件开发中常用的任务调度框架，实际中通常结合 &lt;strong&gt;&lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt;&lt;/strong&gt; 一起使用，并在 &lt;em&gt;Spring&lt;/em&gt; 的配置文件中利用 &lt;em&gt;0 0 12 ? * WED&lt;/em&gt; 这种方式以硬编码的方式配置定时任务的执行时间。有时候需要动态的设置定时任务的执行时间，如让用户自己选择何时备份数据，此时就需要采用动态设置其执行时间。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用dom4j修改含有回车换行符的XML文件</title>
      <link>https://lucumt.info/post/update-xml-file-has-line-breaks-using-dom4j/</link>
      <pubDate>Thu, 04 Jan 2018 11:21:42 +0800</pubDate>
      
      <guid>https://lucumt.info/post/update-xml-file-has-line-breaks-using-dom4j/</guid>
      <description>&lt;p&gt;这几天工作中遇到一个利用 &lt;strong&gt;&lt;a href=&#34;https://dom4j.github.io/&#34;&gt;dom4j&lt;/a&gt;&lt;/strong&gt; 更新XML文件的任务，由于XML文件中部分属性包含有换行符，利用 &lt;em&gt;dom4j(1.6.1)&lt;/em&gt; 默认的方法更新XML文件后换行符会丢失。 各种Google、StackOverflow折腾好久后终于解决该问题，简单记录下。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>将基于Github Pages的自定义域名博客迁移到HTTPS</title>
      <link>https://lucumt.info/post/migrate-github-blog-from-http-to-https/</link>
      <pubDate>Sun, 24 Dec 2017 10:28:03 +0800</pubDate>
      
      <guid>https://lucumt.info/post/migrate-github-blog-from-http-to-https/</guid>
      <description>&lt;p&gt;越来越多的网站和个人博客都变成 &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTPS&#34; title=&#34;https://en.wikipedia.org/wiki/HTTPS&#34;&gt;HTTPS&lt;/a&gt;&lt;/strong&gt; ，而自己的博客一直都是用的是 &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&#34; title=&#34;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&#34;&gt;HTTP&lt;/a&gt;&lt;/strong&gt; 协议，作为一个具有强迫症的人，每次用 &lt;strong&gt;&lt;a href=&#34;https://www.google.cn/chrome/browser/desktop/index.html&#34; title=&#34;https://www.google.cn/chrome/browser/desktop/index.html&#34;&gt;Chrome&lt;/a&gt;&lt;/strong&gt; 浏览器打开个人博客时看见浏览器地址栏显示的&lt;img src=&#34;https://lucumt.info/blog_img/migrate-github-blog-from-http-to-https/http_icon.png&#34; alt=&#34;&amp;quot;Chrome HTTP标识&amp;quot;&#34; title=&#34;Chrome HTTP标识&#34; /&gt; 都感觉很不舒服。趁着前段时间不太忙，将个人博客从 &lt;em&gt;HTTP&lt;/em&gt; 迁移到了 &lt;em&gt;HTTPS&lt;/em&gt; ，先记录下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从复杂代码中找出Bug的几种方法</title>
      <link>https://lucumt.info/post/different-ways-find-bug-in-complex-code/</link>
      <pubDate>Sat, 23 Dec 2017 12:07:40 +0800</pubDate>
      
      <guid>https://lucumt.info/post/different-ways-find-bug-in-complex-code/</guid>
      <description>&lt;p&gt;工作中有时候会遇到某些大段复杂代码出现Bug的情况，不同于一般行数较小或逻辑较简单的代码，对于大段复杂的代码进行分析可能会很耗时，本文介绍几种个人在工作中用到的方法，供大家参考。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在不同版本的MyBatis中通过Log4j打印实际执行的SQL</title>
      <link>https://lucumt.info/post/print-sql-in-different-mybatis-version/</link>
      <pubDate>Mon, 18 Dec 2017 18:33:14 +0800</pubDate>
      
      <guid>https://lucumt.info/post/print-sql-in-different-mybatis-version/</guid>
      <description>&lt;p&gt;项目中ORM框架用的是 &lt;strong&gt;&lt;a href=&#34;http://www.mybatis.org/mybatis-3/&#34;&gt;MyBatis&lt;/a&gt;&lt;/strong&gt;，最近由于业务上的需求将 &lt;em&gt;MyBatis&lt;/em&gt; 从3.1.1升级到3.4.5，发现升级后通过 &lt;strong&gt;&lt;a href=&#34;https://logging.apache.org/log4j/1.2/download.html&#34;&gt;Log4j&lt;/a&gt;&lt;/strong&gt; 显示SQL的配置方式发生了变化，由于变化较大，故先记录下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在不重新编译的情况下直接修改Java Class文件中的内容</title>
      <link>https://lucumt.info/post/modify-java-class-file-content-directly/</link>
      <pubDate>Sat, 12 Aug 2017 18:09:53 +0800</pubDate>
      
      <guid>https://lucumt.info/post/modify-java-class-file-content-directly/</guid>
      <description>&lt;p&gt;Java程序实际上执行的是Java文件编译后的Class文件，这是任何一个Java开发人员都了解的基本知识。若Java程序执行的结果不符合要求，通常的解决方法是先修改Java文件，重新编译成Class文件后再次执行。但有时候我们不能直接修改Java文件（如只有包含class文件的jar包），此时我们就只能直接修改Class文件，本文将展示在基于不同的需求通过可视化工具和Javassist库来直接对Class文件进行修改的方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解决EasyUI DataGrid中的行在列冻结时无法对齐的问题</title>
      <link>https://lucumt.info/post/easyui-datagrid-row-not-align-when-column-frozen/</link>
      <pubDate>Sun, 06 Aug 2017 00:06:36 +0800</pubDate>
      
      <guid>https://lucumt.info/post/easyui-datagrid-row-not-align-when-column-frozen/</guid>
      <description>&lt;p&gt;相对于传统的用HTML中TABLE实现的表格，利用 &lt;strong&gt;&lt;a href=&#34;https://www.jeasyui.com&#34;&gt;EasyUI&lt;/a&gt;&lt;/strong&gt; 中的 &lt;strong&gt;&lt;a href=&#34;https://www.jeasyui.com/demo/main/index.php?plugin=DataGrid&#34;&gt;DataGrid&lt;/a&gt;&lt;/strong&gt; 实现的表格具有很多优点，如可以 &lt;em&gt;对列宽进行拖动调整、列冻结、行冻结、自定义格式化&lt;/em&gt; 等功能，故而在Web开发中得到了广泛的应用。最近自己在使用DataGrid的列冻结功能时遇到了由于某些单元格中的内容较多导致该行无法对齐的问题，由于当前在EasyUI官网中无法找到该问题的解决方案，自己研究DataGrid的实现原理后，找到了变通的解决方案，故先记录下。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>4. [译]并发的模型</title>
      <link>https://lucumt.info/post/java-concurrency/concurrency-models/</link>
      <pubDate>Sat, 05 Aug 2017 00:10:11 +0800</pubDate>
      
      <guid>https://lucumt.info/post/java-concurrency/concurrency-models/</guid>
      <description>&lt;p&gt;本文翻译自&lt;strong&gt;&lt;a href=&#34;http://tutorials.jenkov.com/java-concurrency/concurrency-models.html&#34;&gt;Java Concurrency / Concurrency Models&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;并发系统可以使用不同的并发模型来实现，并发模型是指线程在系统中如何写作来完成给定的任务。不同的并发模型以不同的方式拆分任务，线程间以不同的方式协作和通信，本文将深入研究在撰写本文时最流行并发模型(2015年)。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在MyEclipse项目中不能打开birt报表的解决方法</title>
      <link>https://lucumt.info/post/cannot-open-birt-report-in-myeclipse-project/</link>
      <pubDate>Fri, 07 Apr 2017 10:47:28 +0800</pubDate>
      
      <guid>https://lucumt.info/post/cannot-open-birt-report-in-myeclipse-project/</guid>
      <description>由于业务要求，需要在利用MyEclipse中开发的Web项目中添加Birt报表统计功能，新建完一个 report.rptdesign 文件后双击该文件出现如下错误: 错误信息提</description>
    </item>
    
    <item>
      <title>3. [译]多线程的成本</title>
      <link>https://lucumt.info/post/java-concurrency/multithreading-costs/</link>
      <pubDate>Sat, 01 Apr 2017 21:57:30 +0800</pubDate>
      
      <guid>https://lucumt.info/post/java-concurrency/multithreading-costs/</guid>
      <description>&lt;p&gt;本文翻译自&lt;strong&gt;&lt;a href=&#34;http://tutorials.jenkov.com/java-concurrency/costs.html&#34;&gt;Java Concurrency / Multithreading Costs&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从一个单线程程序切换为多线程程序在给我们带来好处的同时也会产生一些额外的成本，不要因为会使用多线程就将一个程序变为多线程实现。在准备使用多线程时，我们应该有一个清楚的认识：使用多线程带来的好处大于其成本，当有不确定时，我们应该尝试度量应用程序的性能和响应性来决定是否采用多线程，而不是靠猜来决定。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2. [译]多线程的优点</title>
      <link>https://lucumt.info/post/java-concurrency/multithreading-benefits/</link>
      <pubDate>Sat, 01 Apr 2017 13:18:43 +0800</pubDate>
      
      <guid>https://lucumt.info/post/java-concurrency/multithreading-benefits/</guid>
      <description>&lt;p&gt;本文翻译自&lt;strong&gt;&lt;a href=&#34;http://tutorials.jenkov.com/java-concurrency/benefits.html&#34;&gt;Java Concurrency / Multithreading Benefits&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;尽管多线程给程序实现带来了挑战，但由于多线程的一些优点我们仍然在使用它，其中的一些优点如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;更好的资源利用&lt;/li&gt;
&lt;li&gt;在某些场景可以简化程序设计&lt;/li&gt;
&lt;li&gt;提高程序响应&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1. [译]Java多线程与并发教程</title>
      <link>https://lucumt.info/post/java-concurrency/java-concurrency-multithreading-tutorial/</link>
      <pubDate>Thu, 30 Mar 2017 14:49:08 +0800</pubDate>
      
      <guid>https://lucumt.info/post/java-concurrency/java-concurrency-multithreading-tutorial/</guid>
      <description>&lt;p&gt;本文翻译自&lt;strong&gt;&lt;a href=&#34;http://tutorials.jenkov.com/java-concurrency/index.html&#34;&gt;Java Concurrency / Multithreading Tutorial&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最开始一台电脑只有单个CPU，只能一次运行一个任务，之后出现的多任务处理则意味着计算机在同一时间可以处理多个程序（也可以称之为任务或进程），虽然它们并不是真正的并发。由于单个CPU被不同的程序共用，操作系统需要在程序运行过程中不停地切换CPU，在短暂的执行一个程序后就立即切换到下一个程序。&lt;/p&gt;

&lt;p&gt;多任务处理给软件开发人员提出了新的挑战，程序不能再假定拥有CPU所有的可用时间、内存和其它计算机资源，一个好的程序应该及时释放所有不需要使用的资源，以便其它程序可以使用它们。
之后出现的多线程则意味着可以在同一个程序里面执行多个线程，每一个执行的线程可以被认为是CPU在执行当前程序，当在同一个程序里面执行多个线程时，看起来像是拥有多个CPU在执行该程序。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Intellij IDEA中引用Golang本地包</title>
      <link>https://lucumt.info/post/import-local-package-in-intellij-idea/</link>
      <pubDate>Sun, 05 Mar 2017 14:04:43 +0800</pubDate>
      
      <guid>https://lucumt.info/post/import-local-package-in-intellij-idea/</guid>
      <description>&lt;p&gt;在学习&lt;code&gt;Golang&lt;/code&gt;时，自己最开始用的是eclpse中的&lt;a href=&#34;https://goclipse.github.io/&#34;&gt;goclipse&lt;/a&gt;插件来进行 &lt;em&gt;Golang&lt;/em&gt; 编程，但其对&lt;em&gt;Golang&lt;/em&gt; 的支持不是太好，如代码格式化、自动导入引用包等都无法直接在eclipse中使用，并且其自动提示功能也没有像 &lt;em&gt;Java&lt;/em&gt; 那么强，于是转用&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;Intellij IDEA&lt;/a&gt;安装&lt;a href=&#34;https://plugins.jetbrains.com/plugin/5047-go&#34;&gt;Golang插件&lt;/a&gt;来替代使用，安装完插件后的&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;Intellij IDEA&lt;/a&gt;对 &lt;em&gt;Golang&lt;/em&gt; 的支持在各方面都很令人满意，唯独引入本地包的支持不太好用。经过一阵摸索自己找出了解决方案，先记录下。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算两个平行于坐标轴的矩形相交的面积</title>
      <link>https://lucumt.info/post/calculate-total-area-of-two-rectangles/</link>
      <pubDate>Sun, 26 Feb 2017 19:26:33 +0800</pubDate>
      
      <guid>https://lucumt.info/post/calculate-total-area-of-two-rectangles/</guid>
      <description>&lt;p&gt;之前面试时遇到一个算法题: &lt;strong&gt;假定两个矩形各条边都是平行于坐标轴，已知k、l、m、n分别为其中一个矩形左下角和右上角x轴、y轴坐标，p、q、r、s分别为另一个矩形的左下角和右上角x轴、y轴坐标，求这两个矩形的总面积，当矩形相交时要减去相交的面积。&lt;/strong&gt; 此题利用常规的枚举法很复杂，但利用排除法和归纳法却能很快解决，故先记录下。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在iframe嵌套的html5中播放视频时全屏显示和取消音量调整</title>
      <link>https://lucumt.info/post/show-video-in-html5-page/</link>
      <pubDate>Sun, 30 Oct 2016 19:48:17 +0800</pubDate>
      
      <guid>https://lucumt.info/post/show-video-in-html5-page/</guid>
      <description>&lt;p&gt;由于项目需要，最近使用了在&lt;code&gt;html5&lt;/code&gt;中播放视频的功能，期间遇到了几个坑，先简单记录下。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mybatis batch insert exception的解决方法</title>
      <link>https://lucumt.info/post/mybatis-batch-insert-exception/</link>
      <pubDate>Mon, 30 May 2016 18:20:37 +0800</pubDate>
      
      <guid>https://lucumt.info/post/mybatis-batch-insert-exception/</guid>
      <description>&lt;p&gt;在利用 &lt;strong&gt;&lt;a href=&#34;http://www.mybatis.org/mybatis-3/&#34;&gt;MyBatis&lt;/a&gt;&lt;/strong&gt; 进行多条数据插入时，为了提高性能我们可能会使用批量插入的功能来实现。示例代码如下:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SQL配置文件:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;insert id=&amp;quot;addAuthorityRoleBatch&amp;quot; parameterType=&amp;quot;List&amp;quot;&amp;gt;
    INSERT INTO system_authority_role(role_id,authority_id)
      VALUES
      &amp;lt;foreach collection=&amp;quot;list&amp;quot; item=&amp;quot;authRole&amp;quot; separator=&amp;quot;,&amp;quot;&amp;gt;
        (#{authRole.roleId},#{authRole.authorityId})
      &amp;lt;/foreach&amp;gt;
  &amp;lt;/insert&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用SpringMVC下载大文件时内存溢出的处理</title>
      <link>https://lucumt.info/post/download-big-file-using-springmvc/</link>
      <pubDate>Sun, 20 Mar 2016 16:41:29 +0800</pubDate>
      
      <guid>https://lucumt.info/post/download-big-file-using-springmvc/</guid>
      <description>&lt;p&gt;文件的上传和下载是Web系统中的一个很普通的功能，实现的方式也有很多种，如利用 &lt;strong&gt;&lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/io/package-summary.html&#34;&gt;java.io&lt;/a&gt;&lt;/strong&gt; 下面的各种IO类自己实现，或者利用 &lt;strong&gt;&lt;a href=&#34;https://commons.apache.org/proper/commons-io/&#34;&gt;Commons IO&lt;/a&gt;&lt;/strong&gt; 包中的 &lt;strong&gt;&lt;em&gt;FileUtils&lt;/em&gt;&lt;/strong&gt; 、 &lt;strong&gt;&lt;em&gt;IOUtils&lt;/em&gt;&lt;/strong&gt; 类中封装好的方法直接调用。由于目前我所开发的系统采用了 &lt;strong&gt;&lt;a href=&#34;http://docs.spring.io/autorepo/docs/spring/3.2.x/spring-framework-reference/html/mvc.html&#34;&gt;SpringMVC&lt;/a&gt;&lt;/strong&gt; 来作为项目的MVC实现，所以很自然的采用 &lt;strong&gt;&lt;a href=&#34;http://docs.spring.io/autorepo/docs/spring/3.2.x/spring-framework-reference/html/mvc.html&#34;&gt;SpringMVC&lt;/a&gt;&lt;/strong&gt;内置的API进行文件的下载，但在实际使用过程中发现其对大文件的下载支持不太好，现把解决方案记录如下：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用Spring和JUnit对数据库操作进行单元测试</title>
      <link>https://lucumt.info/post/using-junit-in-spring/</link>
      <pubDate>Sun, 20 Mar 2016 16:27:21 +0800</pubDate>
      
      <guid>https://lucumt.info/post/using-junit-in-spring/</guid>
      <description>&lt;p&gt;在进行Java程序开发时，我们偶尔会被要求使用&lt;strong&gt;&lt;a href=&#34;http://junit.org/&#34;&gt;JUnit&lt;/a&gt;&lt;/strong&gt;进行单元测试来确保我们所写的程序逻辑是正确的。一个良好的单元测试应该具备 &lt;strong&gt;&lt;em&gt;覆盖度高，可重复执行，单一性&lt;/em&gt;&lt;/strong&gt; 等特点。本文主要关注&lt;strong&gt;&lt;em&gt;可重复执行&lt;/em&gt;&lt;/strong&gt; ，在Web开发中，大部分方法都会使数据库的记录发生变化，为了能够重复执行，必须利用&lt;strong&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1&#34;&gt;数据库事务&lt;/a&gt;&lt;/strong&gt; 来进行 &lt;strong&gt;&lt;em&gt;回滚&lt;/em&gt;&lt;/strong&gt; 从而达到重复执行的目的。最原始的方法是利用 &lt;strong&gt;&lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/sql/Connection.html&#34;&gt;java.sql.Connection&lt;/a&gt;&lt;/strong&gt; 类的 &lt;code&gt;commit()&lt;/code&gt; 或 &lt;code&gt;rollback()&lt;/code&gt; 方法来在每个单元测试方法中手动的进行提交或回滚，此种方式使得单元测试代码嵌入了与实际业务逻辑无关的数据库操作事务控制代码。利用&lt;strong&gt;&lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;a href=&#34;http://junit.org/&#34;&gt;JUnit&lt;/a&gt;&lt;/strong&gt;通过注解的方式我们可以很容易的对单元测试中的数据库操作进行事务控制。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用Spring Security动态的改变权限</title>
      <link>https://lucumt.info/post/update-authority-dynamic-using-spring-security/</link>
      <pubDate>Sun, 20 Mar 2016 16:05:52 +0800</pubDate>
      
      <guid>https://lucumt.info/post/update-authority-dynamic-using-spring-security/</guid>
      <description>&lt;p&gt;利用 &lt;strong&gt;&lt;a href=&#34;http://projects.spring.io/spring-security/&#34;&gt;Spring Security&lt;/a&gt;&lt;/strong&gt; 来管理我们的web程序时，通常需要在&lt;strong&gt;&lt;em&gt;UserDetailsService&lt;/em&gt;&lt;/strong&gt; 接口中的 &lt;strong&gt;&lt;em&gt;loadUserByUsername&lt;/em&gt;&lt;/strong&gt; 方法中来初始化权限信息,但 &lt;strong&gt;&lt;em&gt;UserDetailsService&lt;/em&gt;&lt;/strong&gt; 一般用于登录验证，这也意味着用户的权限在登录过程中就会被计算出来。通常情况下由于用户的权限很少发生变化，在登录过程中计算出用户权限是合理的，但有些情况下，我们需要在中途来动态的改变用户的权限，此时我们可以利用 &lt;strong&gt;&lt;a href=&#34;http://projects.spring.io/spring-security/&#34;&gt;Spring Security&lt;/a&gt;&lt;/strong&gt; 提供的API来实现。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Spring中利用Mock对HttpServletRequest进行单元测试</title>
      <link>https://lucumt.info/post/using-mock-test-http-servlet-request/</link>
      <pubDate>Sat, 19 Mar 2016 22:43:47 +0800</pubDate>
      
      <guid>https://lucumt.info/post/using-mock-test-http-servlet-request/</guid>
      <description>&lt;h2 id=&#34;编写单元测试时的注意事项&#34;&gt;编写单元测试时的注意事项&lt;/h2&gt;

&lt;p&gt;根据软件开发过程中的&lt;strong&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;TDD&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; 理论，在我们编写自己的代码时，要尽量使得该代码能够进行单元测试。为了能够使得代码可以进行单元测试，我们在给接口或方法传入参数时要尽量传入简单参数，避免传入 &lt;strong&gt;&lt;em&gt;HttpServletRequest&lt;/em&gt;&lt;/strong&gt; , &lt;strong&gt;&lt;em&gt;ServletContext&lt;/em&gt;&lt;/strong&gt; 等和web上下文相关的复杂对象。但仍有部分情况下基于代码简洁性和可维护性的考虑，我们需要传入 &lt;strong&gt;&lt;em&gt;HttpServletRequest&lt;/em&gt;&lt;/strong&gt; 对象，此时对此类方法进行&lt;strong&gt;&lt;a href=&#34;http://junit.org/&#34;&gt;JUnit&lt;/a&gt;&lt;/strong&gt;单元测试时会较为困难，本文介绍一种在&lt;strong&gt;&lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt;&lt;/strong&gt;中通过&lt;strong&gt;&lt;a href=&#34;http://mockito.org/&#34;&gt;Mock&lt;/a&gt;&lt;/strong&gt;来模拟&lt;strong&gt;&lt;em&gt;HttpServletRequest&lt;/em&gt;&lt;/strong&gt; 对象进行&lt;strong&gt;&lt;a href=&#34;http://junit.org/&#34;&gt;JUnit&lt;/a&gt;&lt;/strong&gt;单元测试的方法。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mediawiki添加回到顶部的方法</title>
      <link>https://lucumt.info/post/mediawiki-back-to-top/</link>
      <pubDate>Fri, 18 Mar 2016 23:14:59 +0800</pubDate>
      
      <guid>https://lucumt.info/post/mediawiki-back-to-top/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.mediawiki.org/wiki/MediaWiki&#34;&gt;Mediawiki&lt;/a&gt;&lt;/strong&gt;是&lt;strong&gt;&lt;a href=&#34;https://www.wikipedia.org/&#34;&gt;维基百科&lt;/a&gt;&lt;/strong&gt;系统所采用的框架，适合于需要快速搭建知识分享的场合。采用&lt;strong&gt;&lt;a href=&#34;https://www.mediawiki.org/wiki/MediaWiki&#34;&gt;Mediawiki&lt;/a&gt;&lt;/strong&gt;生成的知识共享平台和&lt;strong&gt;&lt;a href=&#34;https://www.wikipedia.org/&#34;&gt;维基百科&lt;/a&gt;&lt;/strong&gt;的操作与使用类似，都支持采用&lt;strong&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-cn/Markdown&#34;&gt;Markdown&lt;/a&gt;&lt;/strong&gt;语法来编辑。在有些时候，某些词条的内容很长，使得浏览器出现了滚动条，如果能仿照微博等网站添加一个&lt;strong&gt;&lt;em&gt;回到顶部&lt;/em&gt;&lt;/strong&gt;的功能，将会给我们的使用带来很大的便利，本文介绍一种实现方法：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译] Java Volatile 关键字详解</title>
      <link>https://lucumt.info/post/java-concurrency/java-volatile-keyword/</link>
      <pubDate>Mon, 07 Mar 2016 18:03:18 +0800</pubDate>
      
      <guid>https://lucumt.info/post/java-concurrency/java-volatile-keyword/</guid>
      <description>&lt;p&gt;本文翻译自 &lt;strong&gt;&lt;a href=&#34;http://tutorials.jenkov.com/java-concurrency/volatile.html&#34;&gt;Java Volatile Keyword&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Java关键字&lt;code&gt;volatile&lt;/code&gt;用于将一个Java变量标记为 &lt;em&gt;在主内中存储&lt;/em&gt; ，更准确的解释为：每次读取一个 &lt;em&gt;volatile&lt;/em&gt; 变量时将从电脑的主内存中读取而不是从CPU缓存中读取，每次对一个 &lt;em&gt;volatile&lt;/em&gt; 变量进行写操作时，将会写入到主内存中而不是写入到CPU缓存中。&lt;/p&gt;

&lt;p&gt;事实上，从Java5之后，&lt;em&gt;volatile&lt;/em&gt; 关键字不仅仅可以用来确保 &lt;em&gt;volatile&lt;/em&gt; 变量是写入到主内存和从主内存读取数据，我会在下面的章节进行详细的介绍：
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cannot run program &#34;mysqldump&#34;: CreateProcess error=2, The system cannot find the file specified</title>
      <link>https://lucumt.info/post/can-not-run-program-mysqldump/</link>
      <pubDate>Thu, 03 Mar 2016 14:33:43 +0800</pubDate>
      
      <guid>https://lucumt.info/post/can-not-run-program-mysqldump/</guid>
      <description>&lt;p&gt;项目中用到了&lt;code&gt;MySQL&lt;/code&gt;数据库的备份功能，通过调用&lt;code&gt;Java&lt;/code&gt;程序中的&lt;strong&gt;&lt;a href=&#34;http://docs.oracle.com/javase/6/docs/api/&#34;&gt;Runtime&lt;/a&gt;&lt;/strong&gt;来执行&lt;code&gt;mysqldump&lt;/code&gt;命令自动的生成相关的&lt;code&gt;MySQL&lt;/code&gt;数据库文件以供恢复之用。相关的代码如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Runtime runtime = Runtime.getRuntime();
String mysqlCmd = &amp;quot;mysqldump&amp;quot; + &amp;quot; -u&amp;quot; + username + &amp;quot; -p&amp;quot; + password + 
           &amp;quot;  -h &amp;quot; + databaseAddress + &amp;quot; &amp;quot; +databaseName;
Process process = runtime.exec(mysqlCmd);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是在客户那里实际使用时，有时候会出现在cmd中&lt;code&gt;MySQL&lt;/code&gt;命令可以正常识别但是程序不能正常执行的情况，报错信息如下:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用Github Pages和基于Go的Hugo搭建个人博客</title>
      <link>https://lucumt.info/post/create-website-with-hugo/</link>
      <pubDate>Sat, 27 Feb 2016 22:23:37 +0800</pubDate>
      
      <guid>https://lucumt.info/post/create-website-with-hugo/</guid>
      <description>&lt;p&gt;一直以来都想拥有一个属于自己的博客，前段时间在学习&lt;code&gt;Go&lt;/code&gt; ，于是利用&lt;code&gt;Hugo&lt;/code&gt; 和&lt;code&gt;Github Pages&lt;/code&gt; 搭建了一个简易的个人博客，先简单记录下。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>