<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Junit on 飞狐的部落格</title>
    <link>https://lucumt.info/categories/junit/</link>
    <description>Recent content in Junit on 飞狐的部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 20 Mar 2016 16:27:21 +0800</lastBuildDate>
    <atom:link href="https://lucumt.info/categories/junit/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>利用Spring和JUnit对数据库操作进行单元测试</title>
      <link>https://lucumt.info/posts/using-junit-in-spring/</link>
      <pubDate>Sun, 20 Mar 2016 16:27:21 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/using-junit-in-spring/</guid>
      <description>

&lt;p&gt;在进行Java程序开发时，我们偶尔会被要求使用&lt;strong&gt;&lt;a href=&#34;http://junit.org/&#34;&gt;JUnit&lt;/a&gt;&lt;/strong&gt;进行单元测试来确保我们所写的程序逻辑是正确的。一个良好的单元测试应该具备 &lt;strong&gt;&lt;em&gt;覆盖度高，可重复执行，单一性&lt;/em&gt;&lt;/strong&gt; 等特点。本文主要关注&lt;strong&gt;&lt;em&gt;可重复执行&lt;/em&gt;&lt;/strong&gt; ，在Web开发中，大部分方法都会使数据库的记录发生变化，为了能够重复执行，必须利用&lt;strong&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1&#34;&gt;数据库事务&lt;/a&gt;&lt;/strong&gt; 来进行 &lt;strong&gt;&lt;em&gt;回滚&lt;/em&gt;&lt;/strong&gt; 从而达到重复执行的目的。最原始的方法是利用 &lt;strong&gt;&lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/sql/Connection.html&#34;&gt;java.sql.Connection&lt;/a&gt;&lt;/strong&gt; 类的 &lt;code&gt;commit()&lt;/code&gt; 或 &lt;code&gt;rollback()&lt;/code&gt; 方法来在每个单元测试方法中手动的进行提交或回滚，此种方式使得单元测试代码嵌入了与实际业务逻辑无关的数据库操作事务控制代码。利用&lt;strong&gt;&lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;a href=&#34;http://junit.org/&#34;&gt;JUnit&lt;/a&gt;&lt;/strong&gt;通过注解的方式我们可以很容易的对单元测试中的数据库操作进行事务控制。&lt;/p&gt;

&lt;h2 id=&#34;所有方法都回滚:ca90282e7eb1ee4fd1fb33a78c3a6535&#34;&gt;所有方法都回滚&lt;/h2&gt;

&lt;p&gt;在该单元测试类的开头加上 &lt;code&gt;@TransactionConfiguration(defaultRollback=true)&lt;/code&gt; 可以确保该类中的所有方法在执行完毕之后默认都进行回滚。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.hirain.testmanagement.service.test;
 
import static org.junit.Assert.assertEquals;
 
import java.util.Date;
 
import javax.inject.Inject;
 
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;
import org.springframework.transaction.annotation.Transactional;
 
import com.hirain.testmanagement.common.util.StringUtil;
import com.hirain.testmanagement.model.ProjectModel;
import com.hirain.testmanagement.service.IProjectService;
 
@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
@TransactionConfiguration(defaultRollback=true)
@ContextConfiguration(&amp;quot;classpath:spring/spring-context-*.xml&amp;quot;)
public class ProjectServiceTest{
 
	@Inject
	private IProjectService projectService;
	   
	@Test
	@Transactional
	public void testAddProject(){
	  ProjectModel pModel=new ProjectModel();
	  String projectId=StringUtil.getUUID();
	  pModel.setId(projectId);
	  pModel.setName(&amp;quot;汽车电子测试管理系统&amp;quot;);
	  pModel.setAlias(&amp;quot;INTA&amp;quot;);
	  pModel.setLastModifyTime(new Date());
	  pModel.setLastModifyUser(&amp;quot;6e518d0819d14148ae489f76dad80967&amp;quot;);
	  pModel.setCreateTime(new Date());
	  pModel.setCreateUser(&amp;quot;cface18d5fac11e28c68c89cdca4c015&amp;quot;);
	  projectService.addProject(pModel);
	  assertEquals(&amp;quot;Add project failed!&amp;quot;,projectService.getProject(projectId).getName(),pModel.getName());
	}
 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;指定方法回滚:ca90282e7eb1ee4fd1fb33a78c3a6535&#34;&gt;指定方法回滚&lt;/h2&gt;

&lt;p&gt;若想只对某个特定的方法进行回滚，需要在该单元测试类的开头去掉 &lt;code&gt;@TransactionConfiguration(defaultRollback=true)&lt;/code&gt; ，同时在对应的方法上加上注解声明 &lt;code&gt;@Rollback(true)&lt;/code&gt; 即可达到目的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.hirain.testmanagement.service.test;
 
import static org.junit.Assert.assertEquals;
 
import java.util.Date;
 
import javax.inject.Inject;
 
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;
 
import com.hirain.testmanagement.common.util.StringUtil;
import com.hirain.testmanagement.model.ProjectModel;
import com.hirain.testmanagement.service.IProjectService;
 
@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
@ContextConfiguration(&amp;quot;classpath:spring/spring-context-*.xml&amp;quot;)
public class ProjectServiceTest{
 
	@Inject
	private IProjectService projectService;
	   
	@Test
	@Rollback(true)
	public void testAddProject(){
	  ProjectModel pModel=new ProjectModel();
	  String projectId=StringUtil.getUUID();
	  pModel.setId(projectId);
	  pModel.setName(&amp;quot;汽车电子测试管理系统&amp;quot;);
	  pModel.setAlias(&amp;quot;INTA&amp;quot;);
	  pModel.setLastModifyTime(new Date());
	  pModel.setLastModifyUser(&amp;quot;6e518d0819d14148ae489f76dad80967&amp;quot;);
	  pModel.setCreateTime(new Date());
	  pModel.setCreateUser(&amp;quot;cface18d5fac11e28c68c89cdca4c015&amp;quot;);
	  projectService.addProject(pModel);
	  assertEquals(&amp;quot;Add project failed!&amp;quot;,projectService.getProject(projectId).getName(),pModel.getName());
	}
 
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>在Spring中利用Mock对HttpServletRequest进行单元测试</title>
      <link>https://lucumt.info/posts/using-mock-test-http-servlet-request/</link>
      <pubDate>Sat, 19 Mar 2016 22:43:47 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/using-mock-test-http-servlet-request/</guid>
      <description>

&lt;h2 id=&#34;编写单元测试时的注意事项:ce3acd839c9974eb09add799db7e87e2&#34;&gt;编写单元测试时的注意事项&lt;/h2&gt;

&lt;p&gt;根据软件开发过程中的&lt;strong&gt;&lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;TDD&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; 理论，在我们编写自己的代码时，要尽量使得该代码能够进行单元测试。为了能够使得代码可以进行单元测试，我们在给接口或方法传入参数时要尽量传入简单参数，避免传入 &lt;strong&gt;&lt;em&gt;HttpServletRequest&lt;/em&gt;&lt;/strong&gt; , &lt;strong&gt;&lt;em&gt;ServletContext&lt;/em&gt;&lt;/strong&gt; 等和web上下文相关的复杂对象。但仍有部分情况下基于代码简洁性和可维护性的考虑，我们需要传入 &lt;strong&gt;&lt;em&gt;HttpServletRequest&lt;/em&gt;&lt;/strong&gt; 对象，此时对此类方法进行&lt;strong&gt;&lt;a href=&#34;http://junit.org/&#34;&gt;JUnit&lt;/a&gt;&lt;/strong&gt;单元测试时会较为困难，本文介绍一种在&lt;strong&gt;&lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt;&lt;/strong&gt;中通过&lt;strong&gt;&lt;a href=&#34;http://mockito.org/&#34;&gt;Mock&lt;/a&gt;&lt;/strong&gt;来模拟&lt;strong&gt;&lt;em&gt;HttpServletRequest&lt;/em&gt;&lt;/strong&gt; 对象进行&lt;strong&gt;&lt;a href=&#34;http://junit.org/&#34;&gt;JUnit&lt;/a&gt;&lt;/strong&gt;单元测试的方法。&lt;/p&gt;

&lt;p&gt;假设在 &lt;strong&gt;&lt;em&gt;HttpServletRequest&lt;/em&gt;&lt;/strong&gt; 中有一个userId字符串对象，我们想在queryUserById方法中调用该参数来获取用户信息，则正确的做法应如下所示:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  String userId = request.getAttribute(&amp;quot;userId&amp;quot;).toString();//先获取userId对象
  queryUserById(userId);//然后将获取的userId传入对应方法

  public User queryUserById(String userId){//相关该方法
       User userModel = userDao.findById(userId);
       return userModel;
  }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请尽量避免使用第二种方式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  queryUserById(request);//直接传入request对象
  
  public User queryUserById(HttpServletRequest request){//相关方法
       String userId = request.getAttribute(&amp;quot;userId&amp;quot;).toString();//在该方法内部获取userId
 
       User userModel = userDao.findById(userId);
       return userModel;
  }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;若采用第一种方法，我么在进行单元测试时，可以很容易的自己制造一个String字符串来代表userId进行测试，但当采用第二种方法后，在进行单元测试时我们是比较难以模拟一个 &lt;strong&gt;HttpServletRequest&lt;/strong&gt; 对象，从而影响我们的测试。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;spring和mock在单元测试中的使用:ce3acd839c9974eb09add799db7e87e2&#34;&gt;Spring和Mock在单元测试中的使用&lt;/h2&gt;

&lt;p&gt;在某些方法中，为了减少代码量和提高程序的可读性，我们有时候需要直接传入 &lt;strong&gt;&lt;em&gt;HttpServletRequest&lt;/em&gt;&lt;/strong&gt; 或 &lt;strong&gt;&lt;em&gt;ServletContext&lt;/em&gt;&lt;/strong&gt; 对象，如果我们想对这种方法进行测试，可以利用&lt;strong&gt;&lt;a href=&#34;http://mockito.org/&#34;&gt;Mock&lt;/a&gt;&lt;/strong&gt;来模拟相关的对象。&lt;/p&gt;

&lt;p&gt;由于&lt;strong&gt;&lt;a href=&#34;https://spring.io/&#34;&gt;Spring&lt;/a&gt;&lt;/strong&gt;自身已经整合了&lt;strong&gt;&lt;a href=&#34;http://mockito.org/&#34;&gt;Mock&lt;/a&gt;&lt;/strong&gt;相关的类，故在此处展示一个示例代码，以供参考:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.io.File;
 
import org.junit.Test;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockServletContext;
 
public class SpringMockTest {
 
@Test
public void testHttpServletRequest(){
	String realPath =&amp;quot;file:D:\\Java\\apache-tomcat-7.0.23\\webapps\\tmn&amp;quot;;
	//模拟ServletContext,同时初始化realPath，注意要有file:前缀否则会报错
	MockServletContext context = new MockServletContext(realPath);
	//获取realPath
	System.out.println(context.getRealPath(File.separator));
	//模拟HttpServletRequest
	MockHttpServletRequest request = new MockHttpServletRequest(context);
	//通过HttpServletRequest来获取realPath
	System.out.println(request.getSession().getServletContext().getRealPath(File.separator));
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意:请在上下文路径的字符串前面加上 &lt;strong&gt;file:&lt;/strong&gt; 前缀，否则程序会报错。如上面的程序，realPath的值应为 &lt;em&gt;file:D:\Java\apache-tomcat-7.0.23\webapps\tmn&lt;/em&gt; ，若去掉 &lt;em&gt;file:&lt;/em&gt; 前缀，改为 &lt;em&gt;D:\Java\apache-tomcat-7.0.23\webapps\tmn&lt;/em&gt; ，则程序会报错。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>