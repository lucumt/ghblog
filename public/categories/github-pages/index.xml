<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github Pages on 飞狐的部落格</title>
    <link>https://lucumt.info/categories/github-pages/</link>
    <description>Recent content in Github Pages on 飞狐的部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 27 Feb 2016 22:23:37 +0800</lastBuildDate>
    <atom:link href="https://lucumt.info/categories/github-pages/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>利用Github Pages和基于Go的Hugo搭建个人博客</title>
      <link>https://lucumt.info/posts/create-website-with-hugo/</link>
      <pubDate>Sat, 27 Feb 2016 22:23:37 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/create-website-with-hugo/</guid>
      <description>

&lt;p&gt;一直以来都想拥有一个属于自己的博客，前段时间在学习&lt;code&gt;Go&lt;/code&gt; ，于是利用&lt;code&gt;Hugo&lt;/code&gt; 和&lt;code&gt;Github Pages&lt;/code&gt; 搭建了一个简易的个人博客，先简单记录下。&lt;/p&gt;

&lt;h1 id=&#34;环境准备:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;环境准备&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;1.4+&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;v0.14+&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt;账号&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.godaddy.com&#34;&gt;GoDaddy&lt;/a&gt;域名&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;过程概要:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;过程概要&lt;/h1&gt;

&lt;h2 id=&#34;在github上创建一个自己的项目:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;在Github上创建一个自己的项目&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;Github&lt;/code&gt;上创建一个项目，本文中该项目名为 &lt;em&gt;blog&lt;/em&gt;&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/create-github-repository.png&#34; alt=&#34;创建Github项目&#34; title=&#34;创建Github项目&#34; /&gt;&lt;/li&gt;
&lt;li&gt;由于&lt;code&gt;Github Pages&lt;/code&gt;强制要求在托管博客时该项目必须有一个名为 &lt;em&gt;gh-pages&lt;/em&gt; 的分支，所以要预先给该项目创建一个名为 &lt;em&gt;gh-pages&lt;/em&gt; 的分支&lt;/li&gt;
&lt;li&gt;在Github中打开 &lt;em&gt;blog&lt;/em&gt; 项目主页面，点击 &lt;em&gt;Settings&lt;/em&gt; 按钮&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/open-github-project-settings.png&#34; alt=&#34;打开项目配置界面&#34; title=&#34;打开Github项目设置界面&#34; /&gt;
&lt;br /&gt;
在 &lt;em&gt;Github Pages&lt;/em&gt; 这个区域可以看见本项目的发布链接为 &lt;em&gt;https://fox321.github.io/blog/&lt;/em&gt; ，点击该链接可以访问该项目对应的静态页面
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/check-github-project-address.png&#34; alt=&#34;查看项目发布链接&#34; title=&#34;查看项目发布链接&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;利用hugo作为博客生成器:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;利用Hugo作为博客生成器&lt;/h2&gt;

&lt;p&gt;由于&lt;code&gt;Github Pages&lt;/code&gt; 只支持静态的html页面托管，所以需要采用&lt;code&gt;Jekyll&lt;/code&gt; 、&lt;code&gt;Logdown&lt;/code&gt; 等静态博客生成器来快速生成HTML页面，避免纯手动编写时的费时费力。由于自己近期一直在学习&lt;code&gt;Go&lt;/code&gt;，为了加深自己对于&lt;code&gt;Go&lt;/code&gt;的运用，于是便选择&lt;code&gt;Hugo&lt;/code&gt; 作为自己的博客生成器。&lt;code&gt;Hugo&lt;/code&gt; 是一个基于&lt;code&gt;Go]&lt;/code&gt;开发的静态生成器，它采用&lt;em&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-cn/Markdown&#34;&gt;Markdown&lt;/a&gt;&lt;/em&gt; 语法来编写博客生成，然后生成相应的HTML页面。&lt;/p&gt;

&lt;h3 id=&#34;安装go:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;安装Go&lt;/h3&gt;

&lt;p&gt;访问&lt;a href=&#34;https://golang.org/dl/&#34;&gt;Golang下载页&lt;/a&gt;根据自己电脑的操作系统选择是Linux版本或Windows版本，同时注意是选择32位还是64位，一定要与自己的操作系统相匹配。以我自己的64位win7系统为例，安装过程如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;下载&lt;strong&gt;go1.4.2.windows-amd64.msi&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;双击安装，默认是安装在C盘下，由于windows操作系统的特性，我通常不倾向于安装在C盘，故需要设置&lt;code&gt;PATH&lt;/code&gt;、&lt;code&gt;GOPATH&lt;/code&gt;和&lt;code&gt;GOROOT&lt;/code&gt;这三个环境变量，我自己把&lt;code&gt;Go&lt;/code&gt;安装在 &lt;em&gt;D:\code\go&lt;/em&gt; 下，这三个变量相应的设置为:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;PATH=&amp;rsquo;D:\code\go\bin&amp;rsquo;;%PATH%&lt;br /&gt;
GOPATH=&amp;rsquo;D:\code\gopath&amp;rsquo;&lt;br /&gt;
GOROOT=&amp;rsquo;D:\code\go&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其中&lt;strong&gt;PATH&lt;/strong&gt;变量的作用主要是为了将&lt;code&gt;Go&lt;/code&gt;的各种命令加到cmd中。&lt;strong&gt;GOROOT&lt;/strong&gt;则是当我们将&lt;code&gt;Go&lt;/code&gt;安装在我们的自定义目录时，需要制定该安装目录，若安装在默认目录&lt;strong&gt;C:\go&lt;/strong&gt;下则不用设置&lt;strong&gt;GOROOT&lt;/strong&gt;目录，官方文档原文为&lt;em&gt;GOROOT must be set only when installing to a custom location.&lt;/em&gt; 比较难懂的是&lt;strong&gt;GOPATH&lt;/strong&gt;,官方文档上的说明为 &lt;em&gt;Create a directory to contain your workspace, $HOME/work for example, and set the GOPATH environment variable to point to that location.&lt;/em&gt; 据此我们可以将&lt;strong&gt;GOPATH&lt;/strong&gt;理解为工作目录，它主要用来存放&lt;code&gt;Go&lt;/code&gt;代码编译之后的可执行文件，其位置可以随意设置，只要不与&lt;strong&gt;GOROOT&lt;/strong&gt;相同即可。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安装完成之后，重新打开cmd窗口，输入&lt;strong&gt;go version&lt;/strong&gt;之后按Enter键，若出现如下信息，则表示&lt;code&gt;Go&lt;/code&gt;安装成功:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;C:\Users\Administrator&amp;gt;go version&lt;br /&gt;
go version go1.4.2 windows/amd64&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;安装hugo:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;安装Hugo&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Hugo&lt;/code&gt;的安装过程与&lt;code&gt;Go&lt;/code&gt;的类似.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;首先在&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo下载页&lt;/a&gt;根据自己操作系统的类型和位数下载相应的安装包，然后设置对应的&lt;strong&gt;PATH&lt;/strong&gt;环境变量即可。我的安装在 &lt;em&gt;D:\program\hugo&lt;/em&gt; 所以相应的环境变量设置为&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;PATH=&amp;rsquo;D:\program\hugo&amp;rsquo;;%PATH%&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;重新打开cmd窗口，输入&lt;strong&gt;hugo version&lt;/strong&gt;，若出现如下信息，则表示&lt;code&gt;Hugo&lt;/code&gt;安装成功：&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;C:\Users\Administrator&amp;gt;hugo version
Hugo Static Site Generator v0.14 BuildDate: 2015-05-26T01:29:16+08:00&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;关于&lt;code&gt;Hugo&lt;/code&gt;的基本操作命令，可以参见&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Hugo快速入门&lt;/a&gt;，此处不再详述。&lt;/p&gt;

&lt;h2 id=&#34;在github-pages上托管hugo:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;在Github Pages上托管Hugo&lt;/h2&gt;

&lt;h3 id=&#34;安装命令:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;安装命令&lt;/h3&gt;

&lt;p&gt;虽然官方文档&lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;在Github Pages上托管Hugo&lt;/a&gt;上有相应的说明,个人总感觉其说明信息不够详细，故将自己的实现过程记录如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将之前在Github上创建的 &lt;em&gt;blog&lt;/em&gt; 项目clone到本地目录&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/clone-github-repository.png&#34; alt=&#34;将项目下载到本地&#34; title=&#34;将项目下载到本地&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;切换到 &lt;em&gt;blog&lt;/em&gt; 目录并利用&lt;code&gt;hugo new site&lt;/code&gt;命令创建一个名为 &lt;em&gt;person_blog&lt;/em&gt; 的&lt;code&gt;Hugo&lt;/code&gt;站点，然后将其内容移入到 &lt;em&gt;blog&lt;/em&gt; 目录下并删除 &lt;em&gt;person_blog&lt;/em&gt; 目录&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/create-hugo-site-in-repository.png&#34; alt=&#34;创建一个Hugo站点&#34; title=&#34;创建一个Hugo站点&#34; /&gt;&lt;/li&gt;
&lt;li&gt;利用&lt;code&gt;hugo new&lt;/code&gt;命令创建一个md文件用于存储我们的第一篇博客&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/create-hugo-page.png&#34; alt=&#34;创建一个Hugo页面&#34; title=&#34;创建一个Hugo页面&#34; /&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;em&gt;blog&lt;/em&gt; 目录下创建一个名为 &lt;em&gt;themes&lt;/em&gt; 的文件夹用于存储&lt;code&gt;Hugo&lt;/code&gt;样式，并将自己选中的样式下载到本地&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/clone-hugo-theme.png&#34; alt=&#34;下载Hugo样式&#34; title=&#34;下载Hugo样式&#34; /&gt;&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;hugo server --theme=hugo-redlounge --buildDrafts&lt;/code&gt;在本地启动Hugo，启动正常后命令行输出如下&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/start-hugo-in-local.png&#34; alt=&#34;在本地启动Hugo&#34; title=&#34;在本地启动Hugo&#34; /&gt;
&lt;br /&gt;
此时在浏览器中输入&lt;code&gt;http://127.0.0.1:1313&lt;/code&gt;会看到如下输出，该页面意味着本地博客创建成功，接下来要将其上传到&lt;code&gt;Github Pages&lt;/code&gt;中托管&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/visit-local-hugo-site.png&#34; alt=&#34;在本地访问Hugo站点&#34; title=&#34;在本地访问Hugo站点&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;我们需要将相关的链接地址修改为 &lt;em&gt;https://fox321.github.io/blog&lt;/em&gt; ，同时将端口号去掉，相关的命令为 &lt;code&gt;hugo server -D --theme=hugo-redlounge --baseUrl=&amp;quot;https://fox321.github.io/blog&amp;quot; --appendPort=false&lt;/code&gt;，运行截图如下
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/update-hugo-site-url.png&#34; alt=&#34;修改博客链接地址&#34; title=&#34;修改博客链接地址&#34; /&gt;&lt;/li&gt;
&lt;li&gt;修改完链接地址之后，需要将生成的页面提交到&lt;code&gt;Github&lt;/code&gt;中才能被访问，首先需要将页面提交到 &lt;em&gt;master&lt;/em&gt; ，由于我是在Windows操作系统上进行的，而CMD对&lt;code&gt;Git&lt;/code&gt;的支持不是很好，故从此步开始切换为在&lt;code&gt;Git Bash&lt;/code&gt;进行相关操作&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/push-blog-to-github.png&#34; alt=&#34;提交到master&#34; title=&#34;提交到master&#34; /&gt;&lt;/li&gt;
&lt;li&gt;利用&lt;code&gt;subtree&lt;/code&gt;命令将 &lt;em&gt;master&lt;/em&gt; 中 &lt;em&gt;public&lt;/em&gt; 目录下的内容同步到 &lt;em&gt;gh-pages&lt;/em&gt; 目录下&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/push-blog-to-branch.png&#34; alt=&#34;同步到gh-pages&#34; title=&#34;同步到gh-pages&#34; /&gt;
&lt;br /&gt;
此时访问该项目的设置页面，在 &lt;em&gt;Github Pages&lt;/em&gt; 部分会看见如下信息&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/push-blog-to-branch-success.png&#34; alt=&#34;同步到gh-pages成功&#34; title=&#34;同步到gh-pages成功&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;访问 &lt;em&gt;https://fox321.github.io/blog&lt;/em&gt; ，出现如下页面，至此&lt;code&gt;Hugo&lt;/code&gt;博客托管到&lt;code&gt;Github Pages&lt;/code&gt;成功！&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/visit-github-pages-hugo-site.png&#34; alt=&#34;访问Github Pages页面&amp;quot;&#34; title=&#34;访问Github Pages页面&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;相关命令:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;相关命令&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;生成绑定到指定域名的页面 &lt;code&gt;hugo server -D --baseUrl=&amp;quot;http://lucumt.info&amp;quot; --appendPort=false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将 &lt;em&gt;master&lt;/em&gt; 的 &lt;em&gt;public&lt;/em&gt; 目录同步到分支 &lt;code&gt;git subtree push --prefix=public git@github.com:fox321/blog.git gh-pages&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;利用godaddy配置自定义域名:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;利用GoDaddy配置自定义域名&lt;/h2&gt;

&lt;p&gt;在&lt;a href=&#34;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&#34;&gt;Using a custom domain with GitHub Pages&lt;/a&gt;中有详细的说明，我自己配置的时候主要是按照&lt;a href=&#34;https://help.github.com/articles/setting-up-an-apex-domain/&#34;&gt;Setting up an apex domain&lt;/a&gt;中的说明在&lt;a href=&#34;https://www.godaddy.com/&#34;&gt;Godaddy&lt;/a&gt;上的说明来设置的。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在public目录下创建一个名为 &lt;strong&gt;CNAME&lt;/strong&gt; 的文件，并在该文件中写入我们要自定义的域名，我自己的域名为 &lt;em&gt;&lt;a href=&#34;http://lucumt.info&#34;&gt;http://lucumt.info&lt;/a&gt;&lt;/em&gt; ，故填入 &lt;em&gt;lucumt.info&lt;/em&gt;&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/create-cname-file.png&#34; alt=&#34;&amp;quot;创建CNAME文件&amp;quot;&#34; title=&#34;创建CNAME文件并添加域名&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;登陆Godaddy，然后在页面右上角点击自己的用户名，出现如下图所示的页面，选择 &lt;em&gt;Manage My Domains&lt;/em&gt;&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/godaddy-choose-manage-page.png&#34; alt=&#34;&amp;quot;选择域名管理界面&amp;quot;&#34; title=&#34;选择域名管理界面&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;选择完 &lt;em&gt;Manage My Domains&lt;/em&gt; 之后会出现如下图所示的界面，选择 &lt;em&gt;Manage DNS&lt;/em&gt;&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/godaddy-choose-manage-dns.png&#34; alt=&#34;&amp;quot;选择DNS管理界面&amp;quot;&#34; title=&#34;选择DNS管理界面&#34; /&gt;&lt;/li&gt;
&lt;li&gt;选择完 &lt;em&gt;Manage DNS&lt;/em&gt; 之后会出现如下图所示的界面，点击 &lt;em&gt;Add&lt;/em&gt; 按钮会出现下拉框让我们增加A记录&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/godaddy-dns-records-page.png&#34; alt=&#34;&amp;quot;DNS管理界面&amp;quot;&#34; title=&#34;DNS管理界面&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;em&gt;Type&lt;/em&gt; 部分选择 &lt;strong&gt;A&lt;/strong&gt; ，&lt;em&gt;Host&lt;/em&gt; 部分选择 &lt;strong&gt;@&lt;/strong&gt;， &lt;em&gt;Poinst to&lt;/em&gt; 根据&lt;a href=&#34;https://help.github.com/articles/setting-up-an-apex-domain/&#34;&gt;Setting up an apex domain&lt;/a&gt;中的说明在&lt;a href=&#34;https://www.godaddy.com/&#34;&gt;Godaddy&lt;/a&gt;中 &lt;em&gt;Configuring A records with your DNS provider&lt;/em&gt; 部分的说明添加 &lt;strong&gt;192.30.252.153&lt;/strong&gt; ,点击 &lt;em&gt;Save&lt;/em&gt; 即完成一条A记录的添加&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/godaddy-dns-add-a-records.png&#34; alt=&#34;&amp;quot;增加A记录&amp;quot;&#34; title=&#34;增加A记录&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;再次点击 &lt;em&gt;Add&lt;/em&gt; 添加，按照步骤5添加第二条A记录，除了 &lt;em&gt;Points to&lt;/em&gt; 设置为 &lt;strong&gt;192.30.252.154&lt;/strong&gt; 之外，其它的配置都相同&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;Github&lt;/code&gt;项目中点击 &lt;em&gt;Settings&lt;/em&gt; 按钮查看 &lt;em&gt;Github Pages&lt;/em&gt; 区域的设置信息，若出现类似如下图所示的设置信息，则表示我们自定义域名添加成功&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/github-pages-configuration-check.png&#34; alt=&#34;&amp;quot;增加A记录&amp;quot;&#34; title=&#34;增加A记录&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;至此利用&lt;a href=&#34;https://www.godaddy.com/&#34;&gt;Godaddy&lt;/a&gt;来配置自自定义域名的过程完成，输入 &lt;em&gt;&lt;a href=&#34;https://lucumt.info&#34;&gt;https://lucumt.info&lt;/a&gt;&lt;/em&gt; 即可访问自己的博客！&lt;/p&gt;

&lt;p&gt;&amp;lt;&amp;ndash;待续&amp;ndash;&amp;gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>