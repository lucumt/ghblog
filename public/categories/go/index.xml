<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 飞狐的部落格</title>
    <link>https://lucumt.info/categories/go/</link>
    <description>Recent content in Go on 飞狐的部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 05 Mar 2017 14:04:43 +0800</lastBuildDate>
    <atom:link href="https://lucumt.info/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>在Intellij IDEA中引用Golang本地包</title>
      <link>https://lucumt.info/posts/import-local-package-in-intellij-idea/</link>
      <pubDate>Sun, 05 Mar 2017 14:04:43 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/import-local-package-in-intellij-idea/</guid>
      <description>

&lt;p&gt;在学习&lt;code&gt;Golang&lt;/code&gt;时，自己最开始用的是eclpse中的&lt;a href=&#34;https://goclipse.github.io/&#34;&gt;goclipse&lt;/a&gt;插件来进行 &lt;em&gt;Golang&lt;/em&gt; 编程，但其对&lt;em&gt;Golang&lt;/em&gt; 的支持不是太好，如代码格式化、自动导入引用包等都无法直接在eclipse中使用，并且其自动提示功能也没有像 &lt;em&gt;Java&lt;/em&gt; 那么强，于是转用&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;Intellij IDEA&lt;/a&gt;安装&lt;a href=&#34;https://plugins.jetbrains.com/plugin/5047-go&#34;&gt;Golang插件&lt;/a&gt;来替代使用，安装完插件后的&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;Intellij IDEA&lt;/a&gt;对 &lt;em&gt;Golang&lt;/em&gt; 的支持在各方面都很令人满意，唯独引入本地包的支持不太好用。经过一阵摸索自己找出了解决方案，先记录下。&lt;/p&gt;

&lt;h2 id=&#34;在eclipse中引用golang本地包:bb4f21717a930ee21245b90e8acfc2d5&#34;&gt;在Eclipse中引用Golang本地包&lt;/h2&gt;

&lt;p&gt;若我们采用的是&lt;a href=&#34;https://goclipse.github.io/&#34;&gt;goclipse&lt;/a&gt;来开发 &lt;em&gt;Golang&lt;/em&gt; ,则在其中引用本地包很简单，和引用Java包类似。如下图所示，假设 &lt;em&gt;src&lt;/em&gt; 是源代码所在的目录，在 &lt;em&gt;src&lt;/em&gt; 的 &lt;em&gt;sec&lt;/em&gt; 文件夹下有一个名为 &lt;em&gt;calculate.go&lt;/em&gt; 的文件，其中有一个名为 &lt;em&gt;Add&lt;/em&gt; 的函数用于计算两个整数的相加之和。&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/import-local-page-in-intellij-idea/goclipse_package.png&#34; alt=&#34;goclipse中的本地包&#34; /&gt;
&lt;br /&gt;
若要在主程序main方法中调用 &lt;em&gt;Add&lt;/em&gt; 方法，先通过import引入该文件的包名&lt;code&gt;import service&lt;/code&gt;，然后通过包名调用该方法&lt;code&gt;service.Add(1,2)&lt;/code&gt;，如下图所示，可以看出在Eclipse中引用 &lt;em&gt;Golang&lt;/em&gt; 本地包与引用Java包没有太大的区别，都是将包文件放到 &lt;em&gt;src&lt;/em&gt; 源文件夹下，然后通过包名来引用。&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/import-local-page-in-intellij-idea/goclipse_package_reference.png&#34; alt=&#34;goclipse中的本地包引用&#34; /&gt;
&lt;br /&gt;
也可以通过直接导入该包所在的文件夹的名称来调用该方法，此时需要将&lt;code&gt;import service&lt;/code&gt;改为&lt;code&gt;import sec&lt;/code&gt;，如下图所示&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/import-local-page-in-intellij-idea/goclipse_package_reference_folder.png&#34; alt=&#34;goclipse中的本地包通过文件夹引用&#34; /&gt;
&lt;br /&gt;
可以看出在eclipse中导入 &lt;em&gt;Golang&lt;/em&gt; 本地包时有两种方法： &lt;strong&gt;通过import导入包名&lt;/strong&gt; 或 &lt;strong&gt;通过import导入该包对应的文件夹&lt;/strong&gt; ，这两种方法均可使程序正常运行。&lt;/p&gt;

&lt;h2 id=&#34;在intellij-idea中引用golang本地包:bb4f21717a930ee21245b90e8acfc2d5&#34;&gt;在Intellij IDEA中引用Golang本地包&lt;/h2&gt;

&lt;p&gt;下面2张图为在IDEA中建立的对应项目，图中 &lt;em&gt;gproject&lt;/em&gt; 是一个项目，&lt;em&gt;gotest&lt;/em&gt; 是一个模块，我们在 &lt;em&gt;gotest&lt;/em&gt; 下建立相关的测试文件。&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/import-local-page-in-intellij-idea/idea_package.png&#34; alt=&#34;IDEA中的本地包&#34; /&gt;
&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/import-local-page-in-intellij-idea/idea_package_reference.png&#34; alt=&#34;IDEA中的本地包引用&#34; /&gt;
&lt;br /&gt;
在上述代码中我们是通过&lt;code&gt;import service&lt;/code&gt;的方式来导入相应包的，由于IDEA对Golang很强，从图中可以看出 &lt;em&gt;service&lt;/em&gt; 的颜色与其它导入包的颜色不一致，当把鼠标移动到 &lt;em&gt;service&lt;/em&gt; 上时会提示 &lt;em&gt;Cannot resolve file &amp;lsquo;service&amp;rsquo;&lt;/em&gt; ，直接运行时，会出现如下图所示 &lt;em&gt;cannot find package&lt;/em&gt; 错误，将&lt;code&gt;import service&lt;/code&gt;修改为&lt;code&gt;import sec&lt;/code&gt;时，会出现同样的错误，可以看出在idea中默认不支持直接导入本地 &lt;em&gt;Golang&lt;/em&gt; 包。&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/import-local-page-in-intellij-idea/idea_package_reference_run_error.png&#34; alt=&#34;IDEA中引用本地包运行出错&#34; /&gt;
&lt;br /&gt;
从报错信息可以看出，程序在运行时先去 &lt;strong&gt;GOROOT&lt;/strong&gt; 去搜索导入包，然后去 &lt;strong&gt;GOPATH&lt;/strong&gt; 寻找导入包，最后在当前项目模块下寻找导入包，但实际上不存在 &lt;em&gt;D:\program\IntelliJ IDEA 2016.2.1\workspace\gproject\gotest\src\service&lt;/em&gt; 这个目录，故而程序报错，不能正常运行。&lt;/p&gt;

&lt;p&gt;解决该问题的关键是明白 &lt;strong&gt;&lt;a href=&#34;http://golang.org/doc/install#tarball_non_standard&#34;&gt;GOROOT&lt;/a&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;a href=&#34;http://golang.org/cmd/go/#hdr-GOPATH_environment_variable&#34;&gt;GOPATH&lt;/a&gt;&lt;/strong&gt; 的作用，根据官方文档的解释 &lt;strong&gt;GOPATH&lt;/strong&gt; 的主要作用是存放文件以便 &lt;em&gt;Golang&lt;/em&gt; 程序编译时可以进行搜索引用，&lt;strong&gt;GOPATH&lt;/strong&gt; 可以设置一个值或多个值，多个值之间以分号隔开。很明显只要我们将本地 &lt;em&gt;Golang&lt;/em&gt; 加入到 &lt;strong&gt;GOPATH&lt;/strong&gt;中即可在IDEA中正常运行该程序。&lt;/p&gt;

&lt;p&gt;如下图所示，在IDEA中依次选择 &lt;strong&gt;File-&amp;gt;Settings-&amp;gt;Language&amp;amp;Frameworks-&amp;gt;Go-&amp;gt;Go Libraries&lt;/strong&gt; ，会出现如下图所示的配置 &lt;em&gt;Golang&lt;/em&gt; 库的界面，在该界面可以添加 &lt;em&gt;Golang&lt;/em&gt; 本地包所在的路径，该界面包含3个不同作用范围的配置方式： &lt;em&gt;Global libraries&lt;/em&gt; 、 &lt;em&gt;Project libraries&lt;/em&gt; 和 &lt;em&gt;Module libraries&lt;/em&gt; ，其中 &lt;em&gt;Global libraries&lt;/em&gt; 的配置对所有项目生效为全局配置，&lt;em&gt;Project libraries&lt;/em&gt; 的配置对整个项目生效，&lt;em&gt;Module libraries&lt;/em&gt; 的配置只对模块生效，可以看出在 &lt;em&gt;Global libraries&lt;/em&gt; 默认包含了 &lt;strong&gt;GOPATH&lt;/strong&gt; 。根据实际使用的需求我们可以选择把本地包设置在 &lt;em&gt;Project libraries&lt;/em&gt; 还是 &lt;em&gt;Module libraries&lt;/em&gt; 中。&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/import-local-page-in-intellij-idea/idea_package_select_gopath.png&#34; alt=&#34;IDEA中配置程序库&#34; /&gt;
&lt;br /&gt;
本文的程序都是在 &lt;em&gt;gotest&lt;/em&gt; 模块下，故将其添加到 &lt;em&gt;Module libraries&lt;/em&gt; 下，添加完的结果如下所示：&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/import-local-page-in-intellij-idea/idea_package_gopath_config.png&#34; alt=&#34;IDEA中配置程序库的结果&#34; /&gt;
&lt;br /&gt;
将本地包添加到模块库之后，还需要在go文件中将导入包的语句设置为&lt;code&gt;import sec&lt;/code&gt;，不能设置为&lt;code&gt;import service&lt;/code&gt;，然后该 &lt;em&gt;Golang&lt;/em&gt; 程序即可正常运行。&lt;/p&gt;

&lt;p&gt;可以看出，不同于&lt;a href=&#34;https://goclipse.github.io/&#34;&gt;goclipse&lt;/a&gt;，在IDEA中只能使用 &lt;strong&gt;通过import导入该包对应的文件夹&lt;/strong&gt; 来导入本地 &lt;em&gt;Golang&lt;/em&gt; 包，至于原因还需要进一步研究。&lt;/p&gt;

&lt;h2 id=&#34;利用goclipse时无法运行程序的解决方法:bb4f21717a930ee21245b90e8acfc2d5&#34;&gt;利用Goclipse时无法运行程序的解决方法&lt;/h2&gt;

&lt;p&gt;在使用&lt;a href=&#34;https://goclipse.github.io/&#34;&gt;goclipse&lt;/a&gt;运行 &lt;em&gt;Golang&lt;/em&gt; 程序时，偶尔会出现程序无法编译和运行的情况，这种情形一般都是 &lt;em&gt;src&lt;/em&gt; 没有被设置成源代码目录造成的，此时可以通过如下图所示的方法，将 &lt;em&gt;src&lt;/em&gt; 目录添加源代码目录。在Eclipse中选中该项目然后点击 &lt;strong&gt;Properties&lt;/strong&gt; ，会出现项目属性配置界面，点击 &lt;strong&gt;Go Project Configuration&lt;/strong&gt; ，通过 &lt;strong&gt;Add Folder&lt;/strong&gt; 可以将 &lt;em&gt;src&lt;/em&gt; 添加到源代码中，之后程序即可正常运行。&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/import-local-page-in-intellij-idea/goclipse_add_source_folder.png&#34; alt=&#34;goclipse中添加源程序目录&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>利用Github Pages和基于Go的Hugo搭建个人博客</title>
      <link>https://lucumt.info/posts/create-website-with-hugo/</link>
      <pubDate>Sat, 27 Feb 2016 22:23:37 +0800</pubDate>
      
      <guid>https://lucumt.info/posts/create-website-with-hugo/</guid>
      <description>

&lt;p&gt;一直以来都想拥有一个属于自己的博客，前段时间在学习&lt;code&gt;Go&lt;/code&gt; ，于是利用&lt;code&gt;Hugo&lt;/code&gt; 和&lt;code&gt;Github Pages&lt;/code&gt; 搭建了一个简易的个人博客，先简单记录下。&lt;/p&gt;

&lt;h2 id=&#34;环境准备:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;环境准备&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;1.4+&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;v0.14+&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt;账号&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.godaddy.com&#34;&gt;GoDaddy&lt;/a&gt;域名&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;过程概要:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;过程概要&lt;/h2&gt;

&lt;h3 id=&#34;在github上创建一个自己的项目:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;在Github上创建一个自己的项目&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;在 &lt;em&gt;Github&lt;/em&gt; 上创建一个项目，本文中该项目名为 &lt;em&gt;blog&lt;/em&gt;&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/create-github-repository.png&#34; alt=&#34;创建Github项目&#34; title=&#34;创建Github项目&#34; /&gt;&lt;/li&gt;
&lt;li&gt;由于&lt;code&gt;Github Pages&lt;/code&gt;强制要求在托管博客时该项目必须有一个名为 &lt;em&gt;gh-pages&lt;/em&gt; 的分支，所以要预先给该项目创建一个名为 &lt;em&gt;gh-pages&lt;/em&gt; 的分支&lt;/li&gt;
&lt;li&gt;在Github中打开 &lt;em&gt;blog&lt;/em&gt; 项目主页面，点击 &lt;em&gt;Settings&lt;/em&gt; 按钮&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/open-github-project-settings.png&#34; alt=&#34;打开项目配置界面&#34; title=&#34;打开Github项目设置界面&#34; /&gt;
&lt;br /&gt;
在 &lt;em&gt;Github Pages&lt;/em&gt; 这个区域可以看见本项目的发布链接为 &lt;em&gt;https://fox321.github.io/blog/&lt;/em&gt; ，点击该链接可以访问该项目对应的静态页面&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/check-github-project-address.png&#34; alt=&#34;查看项目发布链接&#34; title=&#34;查看项目发布链接&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;利用hugo作为博客生成器:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;利用Hugo作为博客生成器&lt;/h3&gt;

&lt;p&gt;由于 &lt;em&gt;Github Pages&lt;/em&gt; 只支持静态的html页面托管，所以需要采用&lt;code&gt;Jekyll&lt;/code&gt; 、&lt;code&gt;Logdown&lt;/code&gt; 等静态博客生成器来快速生成HTML页面，避免纯手动编写时的费时费力。由于自己近期一直在学习 &lt;em&gt;Go*，为了加深自己对于 *Go&lt;/em&gt; 的运用，于是便选择 &lt;em&gt;Hugo&lt;/em&gt;  作为自己的博客生成器。 &lt;em&gt;Hugo&lt;/em&gt; 是一个基于 &lt;em&gt;Go&lt;/em&gt; 开发的静态生成器，它采用&lt;em&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-cn/Markdown&#34;&gt;Markdown&lt;/a&gt;&lt;/em&gt; 语法来编写博客生成，然后生成相应的HTML页面。&lt;/p&gt;

&lt;h4 id=&#34;安装go:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;安装Go&lt;/h4&gt;

&lt;p&gt;访问&lt;a href=&#34;https://golang.org/dl/&#34;&gt;Golang下载页&lt;/a&gt;根据自己电脑的操作系统选择是Linux版本或Windows版本，同时注意是选择32位还是64位，一定要与自己的操作系统相匹配。以我自己的64位win7系统为例，安装过程如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;下载&lt;strong&gt;go1.4.2.windows-amd64.msi&lt;/strong&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;双击安装，默认是安装在C盘下，由于windows操作系统的特性，我通常不倾向于安装在C盘，故需要设置&lt;code&gt;PATH&lt;/code&gt;、&lt;code&gt;GOPATH&lt;/code&gt;和&lt;code&gt;GOROOT&lt;/code&gt;这三个环境变量，我自己把 &lt;em&gt;Go&lt;/em&gt; 安装在 &lt;em&gt;D:\code\go&lt;/em&gt; 下，这三个变量相应的设置为:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATH=&#39;D:\code\go\bin&#39;;%PATH%  
GOPATH=&#39;D:\code\gopath&#39;  
GOROOT=&#39;D:\code\go&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中&lt;strong&gt;PATH&lt;/strong&gt;变量的作用主要是为了将 &lt;em&gt;Go&lt;/em&gt; 的各种命令加到cmd中。&lt;strong&gt;GOROOT&lt;/strong&gt;则是当我们将 &lt;em&gt;Go&lt;/em&gt; 安装在我们的自定义目录时，需要制定该安装目录，若安装在默认目录&lt;strong&gt;C:\go&lt;/strong&gt;下则不用设置&lt;strong&gt;GOROOT&lt;/strong&gt;目录，官方文档原文为&lt;em&gt;GOROOT must be set only when installing to a custom location.&lt;/em&gt; 比较难懂的是&lt;strong&gt;GOPATH&lt;/strong&gt;,官方文档上的说明为 &lt;em&gt;Create a directory to contain your workspace, $HOME/work for example, and set the GOPATH environment variable to point to that location.&lt;/em&gt; 据此我们可以将&lt;strong&gt;GOPATH&lt;/strong&gt;理解为工作目录，它主要用来存放 &lt;em&gt;Go&lt;/em&gt; 代码编译之后的可执行文件，其位置可以随意设置，只要不与&lt;strong&gt;GOROOT&lt;/strong&gt;相同即可。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装完成之后，重新打开cmd窗口，输入&lt;strong&gt;go version&lt;/strong&gt;之后按Enter键，若出现如下信息，则表示 &lt;em&gt;Go&lt;/em&gt; 安装成功:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\Administrator&amp;gt;go version  
go version go1.4.2 windows/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;安装hugo:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;安装Hugo&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Hugo&lt;/em&gt; 的安装过程与 &lt;em&gt;Go&lt;/em&gt; 的类似.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先在&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;Hugo下载页&lt;/a&gt;根据自己操作系统的类型和位数下载相应的安装包，然后设置对应的&lt;strong&gt;PATH&lt;/strong&gt;环境变量即可。我的安装在 &lt;em&gt;D:\program\hugo&lt;/em&gt; 所以相应的环境变量设置为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATH=&#39;D:\program\hugo&#39;;%PATH%
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;重新打开cmd窗口，输入&lt;strong&gt;hugo version&lt;/strong&gt;，若出现如下信息，则表示 &lt;em&gt;Hugo&lt;/em&gt; 安装成功：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\Administrator&amp;gt;hugo version
Hugo Static Site Generator v0.14 BuildDate: 2015-05-26T01:29:16+08:00
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于 &lt;em&gt;Hugo&lt;/em&gt; 的基本操作命令，可以参见&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Hugo快速入门&lt;/a&gt;，此处不再详述。&lt;/p&gt;

&lt;h3 id=&#34;在github-pages上托管hugo:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;在Github Pages上托管Hugo&lt;/h3&gt;

&lt;h4 id=&#34;安装命令:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;安装命令&lt;/h4&gt;

&lt;p&gt;虽然官方文档&lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;在Github Pages上托管Hugo&lt;/a&gt;上有相应的说明,个人总感觉其说明信息不够详细，故将自己的实现过程记录如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将之前在Github上创建的 &lt;em&gt;blog&lt;/em&gt; 项目clone到本地目录&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/clone-github-repository.png&#34; alt=&#34;将项目下载到本地&#34; title=&#34;将项目下载到本地&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;切换到 &lt;em&gt;blog&lt;/em&gt; 目录并利用&lt;code&gt;hugo new site&lt;/code&gt;命令创建一个名为 &lt;em&gt;person_blog&lt;/em&gt; 的 &lt;em&gt;Hugo&lt;/em&gt; 站点，然后将其内容移入到 &lt;em&gt;blog&lt;/em&gt; 目录下并删除 &lt;em&gt;person_blog&lt;/em&gt; 目录&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/create-hugo-site-in-repository.png&#34; alt=&#34;创建一个Hugo站点&#34; title=&#34;创建一个Hugo站点&#34; /&gt;&lt;/li&gt;
&lt;li&gt;利用&lt;code&gt;hugo new&lt;/code&gt;命令创建一个md文件用于存储我们的第一篇博客&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/create-hugo-page.png&#34; alt=&#34;创建一个Hugo页面&#34; title=&#34;创建一个Hugo页面&#34; /&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;em&gt;blog&lt;/em&gt; 目录下创建一个名为 &lt;em&gt;themes&lt;/em&gt; 的文件夹用于存储 &lt;em&gt;Hugo&lt;/em&gt; 样式，并将自己选中的样式下载到本地&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/clone-hugo-theme.png&#34; alt=&#34;下载Hugo样式&#34; title=&#34;下载Hugo样式&#34; /&gt;&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;hugo server --theme=hugo-redlounge --buildDrafts&lt;/code&gt;在本地启动Hugo，启动正常后命令行输出如下&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/start-hugo-in-local.png&#34; alt=&#34;在本地启动Hugo&#34; title=&#34;在本地启动Hugo&#34; /&gt;
&lt;br /&gt;
此时在浏览器中输入&lt;code&gt;http://127.0.0.1:1313&lt;/code&gt;会看到如下输出，该页面意味着本地博客创建成功，接下来要将其上传到&lt;code&gt;Github Pages&lt;/code&gt;中托管&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/visit-local-hugo-site.png&#34; alt=&#34;在本地访问Hugo站点&#34; title=&#34;在本地访问Hugo站点&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;我们需要将相关的链接地址修改为 &lt;em&gt;https://fox321.github.io/blog&lt;/em&gt; ，同时将端口号去掉，相关的命令为 &lt;code&gt;hugo server -D --theme=hugo-redlounge --baseUrl=&amp;quot;https://fox321.github.io/blog&amp;quot; --appendPort=false&lt;/code&gt;，运行截图如下
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/update-hugo-site-url.png&#34; alt=&#34;修改博客链接地址&#34; title=&#34;修改博客链接地址&#34; /&gt;&lt;/li&gt;
&lt;li&gt;修改完链接地址之后，需要将生成的页面提交到 &lt;em&gt;Github&lt;/em&gt; 中才能被访问，首先需要将页面提交到 &lt;em&gt;master&lt;/em&gt; ，由于我是在Windows操作系统上进行的，而CMD对&lt;code&gt;Git&lt;/code&gt;的支持不是很好，故从此步开始切换为在 &lt;em&gt;Git Bash&lt;/em&gt; 进行相关操作&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/push-blog-to-github.png&#34; alt=&#34;提交到master&#34; title=&#34;提交到master&#34; /&gt;&lt;/li&gt;
&lt;li&gt;利用&lt;code&gt;subtree&lt;/code&gt;命令将 &lt;em&gt;master&lt;/em&gt; 中 &lt;em&gt;public&lt;/em&gt; 目录下的内容同步到 &lt;em&gt;gh-pages&lt;/em&gt; 目录下&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/push-blog-to-branch.png&#34; alt=&#34;同步到gh-pages&#34; title=&#34;同步到gh-pages&#34; /&gt;
&lt;br /&gt;
此时访问该项目的设置页面，在 &lt;em&gt;Github Pages&lt;/em&gt; 部分会看见如下信息&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/push-blog-to-branch-success.png&#34; alt=&#34;同步到gh-pages成功&#34; title=&#34;同步到gh-pages成功&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;访问 &lt;em&gt;https://fox321.github.io/blog&lt;/em&gt; ，出现如下页面，至此 &lt;em&gt;Hugo&lt;/em&gt; 博客托管到 &lt;em&gt;Github Pages&lt;/em&gt; 成功！&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/visit-github-pages-hugo-site.png&#34; alt=&#34;访问Github Pages页面&amp;quot;&#34; title=&#34;访问Github Pages页面&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;相关命令:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;相关命令&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;生成绑定到指定域名的页面 &lt;code&gt;hugo server -D --baseUrl=&amp;quot;http://lucumt.info&amp;quot; --appendPort=false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将 &lt;em&gt;master&lt;/em&gt; 的 &lt;em&gt;public&lt;/em&gt; 目录同步到分支 &lt;code&gt;git subtree push --prefix=public git@github.com:fox321/blog.git gh-pages&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;利用godaddy配置自定义域名:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;利用GoDaddy配置自定义域名&lt;/h3&gt;

&lt;p&gt;在&lt;a href=&#34;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&#34;&gt;Using a custom domain with GitHub Pages&lt;/a&gt;中有详细的说明，我自己配置的时候主要是按照&lt;a href=&#34;https://help.github.com/articles/setting-up-an-apex-domain/&#34;&gt;Setting up an apex domain&lt;/a&gt;中的说明在&lt;a href=&#34;https://www.godaddy.com/&#34;&gt;GoDaddy&lt;/a&gt;上的说明来设置的。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在public目录下创建一个名为 &lt;strong&gt;CNAME&lt;/strong&gt; 的文件，并在该文件中写入我们要自定义的域名，我自己的域名为 &lt;em&gt;&lt;a href=&#34;http://lucumt.info&#34;&gt;http://lucumt.info&lt;/a&gt;&lt;/em&gt; ，故填入 &lt;em&gt;lucumt.info&lt;/em&gt;&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/create-cname-file.png&#34; alt=&#34;&amp;quot;创建CNAME文件&amp;quot;&#34; title=&#34;创建CNAME文件并添加域名&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;登陆Godaddy，然后在页面右上角点击自己的用户名，出现如下图所示的页面，选择 &lt;em&gt;Manage My Domains&lt;/em&gt;&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/godaddy-choose-manage-page.png&#34; alt=&#34;&amp;quot;选择域名管理界面&amp;quot;&#34; title=&#34;选择域名管理界面&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;选择完 &lt;em&gt;Manage My Domains&lt;/em&gt; 之后会出现如下图所示的界面，选择 &lt;em&gt;Manage DNS&lt;/em&gt;&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/godaddy-choose-manage-dns.png&#34; alt=&#34;&amp;quot;选择DNS管理界面&amp;quot;&#34; title=&#34;选择DNS管理界面&#34; /&gt;&lt;/li&gt;
&lt;li&gt;选择完 &lt;em&gt;Manage DNS&lt;/em&gt; 之后会出现如下图所示的界面，点击 &lt;em&gt;Add&lt;/em&gt; 按钮会出现下拉框让我们增加A记录&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/godaddy-dns-records-page.png&#34; alt=&#34;&amp;quot;DNS管理界面&amp;quot;&#34; title=&#34;DNS管理界面&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;em&gt;Type&lt;/em&gt; 部分选择 &lt;strong&gt;A&lt;/strong&gt; ，&lt;em&gt;Host&lt;/em&gt; 部分选择 &lt;strong&gt;@&lt;/strong&gt;， &lt;em&gt;Poinst to&lt;/em&gt; 根据&lt;a href=&#34;https://help.github.com/articles/setting-up-an-apex-domain/&#34;&gt;Setting up an apex domain&lt;/a&gt;中的说明在 &lt;em&gt;GoDaddy&lt;/em&gt; 中 &lt;em&gt;Configuring A records with your DNS provider&lt;/em&gt; 部分的说明添加 &lt;strong&gt;192.30.252.153&lt;/strong&gt; ,点击 &lt;em&gt;Save&lt;/em&gt; 即完成一条A记录的添加&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/godaddy-dns-add-a-records.png&#34; alt=&#34;&amp;quot;增加A记录&amp;quot;&#34; title=&#34;增加A记录&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;再次点击 &lt;em&gt;Add&lt;/em&gt; 添加，按照步骤5添加第二条A记录，除了 &lt;em&gt;Points to&lt;/em&gt; 设置为 &lt;strong&gt;192.30.252.154&lt;/strong&gt; 之外，其它的配置都相同&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;Github&lt;/code&gt;项目中点击 &lt;em&gt;Settings&lt;/em&gt; 按钮查看 &lt;em&gt;Github Pages&lt;/em&gt; 区域的设置信息，若出现类似如下图所示的设置信息，则表示我们自定义域名添加成功&lt;br /&gt;
&lt;img src=&#34;https://lucumt.info/blog_img/create-website-with-hugo/github-pages-configuration-check.png&#34; alt=&#34;&amp;quot;增加A记录&amp;quot;&#34; title=&#34;增加A记录&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;至此利用 &lt;em&gt;GoDaddy&lt;/em&gt; 来配置自自定义域名的过程完成，输入 &lt;em&gt;&lt;a href=&#34;http://lucumt.info&#34;&gt;http://lucumt.info&lt;/a&gt;&lt;/em&gt; 即可访问自己的博客！&lt;/p&gt;

&lt;p&gt;PS:吐槽下让人觉得不爽的几个地方：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;域名续费几乎没有折扣，所以建议第一次买的时间长一点。&lt;/li&gt;
&lt;li&gt;取消订单功能消失了，现在只能打人工客服电话取消。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果大家有 &lt;em&gt;GoDaddy&lt;/em&gt; 之外更好的域名服务网站，欢迎给我留言，当然国内的域名服务商除外！&lt;/p&gt;

&lt;h3 id=&#34;开启自定义域名的https访问:ef8b9e40461ea61e62e36d1aa4c54d14&#34;&gt;开启自定义域名的HTTPS访问&lt;/h3&gt;

&lt;p&gt;请参见本人写的另外一篇文章 &lt;strong&gt;&lt;a href=&#34;https://lucumt.info/posts/migrate-github-blog-from-http-to-https/&#34;&gt;将基于Github Pages的自定义域名博客迁移到Https&lt;/a&gt;&lt;/strong&gt; ，此处不再详述。&lt;/p&gt;

&lt;p&gt;&amp;lt;&amp;ndash;待续&amp;ndash;&amp;gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>